{"version":3,"sources":["components/Header.js","components/ThreadAlerts.js","components/Home.js","components/FormInputField.js","components/CreateAlert.js","components/Alert.js","components/ThreadView.js","components/DropdownList.js","components/FilterForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","to","title","ThreadAlerts","createHistory","background","apiServer","renderTableData","alerts","map","alertData","id","date","region","description","bgcolor","Table","Row","style","onClick","history","push","Cell","textAlign","state","loadingData","this","location","setState","console","log","axios","get","payload","data","Dimmer","active","inverted","Loader","size","padding","fixed","singleLine","padded","selectable","color","HeaderCell","width","Body","Component","withRouter","Home","className","type","FormInputField","label","placeholder","propChanged","values","errorMessage","InputGroup","Prepend","Text","FormControl","as","onChange","required","key","value","e","item","properties","target","handleSubmit","event","a","async","inputNode","preventDefault","Object","keys","payloadKey","undefined","moment","format","post","formatItem","includes","substring","length","formatType","requiredProperties","bind","res","Segment","icon","Icon","name","circular","Form","onSubmit","example","Button","variant","Alert","eventDetails","linkable","Card","bg","Title","ThreadView","match","params","put","comments","alert","ListGroup","comment","i","Item","aria-label","DropdownList","isFetching","multiple","search","handleChange","handleClose","handleDropdown","Dropdown","fluid","selection","disabled","loading","options","noResultsMessage","onClose","selectOnNavigation","FilterForm","severity","severityList","optionList","text","regionList","typeList","handleBack","handleValidation","fields","then","basic","raised","Grid","centered","align","cellPadding","animated","Content","visible","hidden","Divider","JSON","stringify","App","exact","path","component","CreateAlert","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31c304bc.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nfunction Header(props) {\n  return (\n    <Fragment>\n      <Link to={ '/' }>\n        <div>\n          <h2>{props.title}</h2>\n        </div>\n      </Link>\n    </Fragment>\n  )\n}\n\nexport default Header","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Loader, Dimmer, Table } from 'semantic-ui-react' \nimport createHistory from \"history/createBrowserHistory\"\nimport { withRouter } from 'react-router-dom';\n\nconst history = createHistory()\n\nclass ThreadAlerts extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loadingData: false,\n            alerts: []\n        };\n    }\n    \n    async componentDidMount() {\n        try {\n            const alerts = this.props.location.state.alerts\n            this.setState({alerts: alerts})\n            console.log(\"Prop value: \", this.props.location.state.alerts)\n            console.log(\"Alerts State: \", this.state.alerts);\n        } catch (e) {\n            try {\n                this.setState({ loadingData: true });\n                const payload = await axios.get(`${this.apiServer}alerts`)\n                this.setState({\n                    loadingData: false,\n                    alerts: payload.data,\n                });\n            } catch (e) {\n                console.log('Error while fetching alterts')\n            }\n        }\n    }\n\n    background = {\n        \"Low\": \"#FFFFFF\",\n        \"Medium\": \"#FFCC00\",\n        \"High\": \"#FF0000\",\n    };\n\n    apiServer = 'https://socnet.pythonanywhere.com/';\n\n    renderTableData = (alerts) => {\n        return alerts.map((alertData) => {\n            const id = alertData[0]\n            const date = alertData[1]\n            const region = alertData[4]\n            const title = alertData[6]\n            const description = alertData[7]\n\n            const bgcolor = this.background\n\n            return (\n                <Table.Row style={{background: bgcolor[alertData[8]]}} \n                    onClick = {() => {\n                        this.props.history.push(`/thread/${id}`)\n                    }\n                }>\n                    <Table.Cell> {title} </Table.Cell>\n                    <Table.Cell> {description} </Table.Cell>\n                    <Table.Cell> {region} </Table.Cell>\n                    <Table.Cell textAlign=\"right\"> {date} </Table.Cell>\n                </Table.Row>\n            )\n        })\n    }\n\n    render() {\n\n        const { loadingData, alerts } = this.state;\n        \n        if (loadingData) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div style={{padding: \"2%\"}}>\n                <Table fixed singleLine padded selectable color=\"teal\">\n                    <Table.Header>\n                        <Table.HeaderCell> Type </Table.HeaderCell>\n                        <Table.HeaderCell width={6}> Description </Table.HeaderCell>\n                        <Table.HeaderCell> Region </Table.HeaderCell>\n                        <Table.HeaderCell textAlign=\"right\"> Date </Table.HeaderCell>\n                    </Table.Header>\n                    <Table.Body>\n                        { this.renderTableData(alerts) }\n                    </Table.Body>\n                </Table>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ThreadAlerts);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport Header from './Header';\n// import Alert from './Alert';\nimport ThreadAlerts from './ThreadAlerts';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingData: false,\n      alerts: [],\n    };\n    this.apiServer = 'https://socnet.pythonanywhere.com/'\n  }\n\n  // async componentDidMount() {\n  //   try {\n  //     this.setState({ loadingData: true });\n  //     // get the alerts from the server\n  //     const res = await axios.get(`${this.apiServer}alerts`);\n  //     // add them to the state\n  //     this.setState({\n  //       alerts: res.data,\n  //       loadingData: false,\n  //     })\n  //     console.log(this.state);\n  //   } catch (e) {\n  //     console.log('error')\n  //   }\n  // }\n\n  render() {\n    const { loadingData, alerts } = this.state\n\n    // while fetching data from the API\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n\n    return (\n      <div className=\"container\">\n        <Header title=\"Socnet\" />\n        <Link to='/createAlert'><button type=\"button\" className=\"btn btn-primary\">Create Alert</button></Link> <br /> <br />\n        <Link to='/'><button type=\"button\" className=\"btn btn-primary\">Filter Results</button></Link>\n        <ThreadAlerts />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { FormControl, InputGroup } from 'react-bootstrap';\n\nfunction FormInputField(props) {\n  const {\n    label, type, placeholder, propChanged, values, errorMessage\n  } = props;\n  if (typeof values !== \"undefined\") {\n    return (\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">{label}</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder={placeholder}\n          as={type}\n          onChange={propChanged}\n          required\n        >\n          <option key=\"Choose...\">Choose...</option>\n          {values.map((value) => {\n            return (<option key={value}>{value}</option>);\n          })}\n        </FormControl>\n        <div>{errorMessage}</div>\n      </InputGroup>\n    );\n  } else {\n    return (\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">{label}</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder={placeholder}\n          type={type}\n          onChange={propChanged}\n          required\n        />\n      </InputGroup>\n    );\n  }\n}\n\nexport default FormInputField;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport { Form, Button } from 'react-bootstrap';\nimport FormInputField from './FormInputField';\nimport moment from 'moment';\nimport { Header, Icon, Segment } from 'semantic-ui-react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingData: false,\n      properties: {},\n      requiredProperties: [],\n      payload: {}\n    };\n\n    this.apiServer = 'https://socnet.pythonanywhere.com/';\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      const res = await axios.get(`${this.apiServer}form`);\n      this.setState({\n        properties: res.data.properties,\n        requiredProperties: res.data.required,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log('error')\n    }\n  }\n  propChanged = (e, item) => {\n\n    const { properties } = this.state;\n    const { value } = e.target;\n    console.log(\"props changed properties \", properties);\n    properties[item].value = value;\n    this.setState({\n      payload: properties,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    console.log(\"event is \", this.inputNode);\n    console.log(\"before payload\", this.state.payload);\n    event.preventDefault();\n\n    const { payload } = this.state;\n    const { history } = this.props;\n\n    Object.keys(payload).map((payloadKey) => {\n      if (payloadKey === \"event_severity\" && payload[payloadKey].value === undefined) {\n        payload[payloadKey] = 'Low';\n      } else\n        payload[payloadKey] = payload[payloadKey].value;\n    });\n\n    payload[\"event_datetime\"] = moment().format(\"YYYY/MM/DD h:mm:ss\");\n    console.log(\"after payload\", moment().format(\"YYYY/MM/DD h:mm:ss\"));\n    \n    try {\n      await axios.post(`${this.apiServer}alerts`, payload);\n      history.push('/alerts');\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n  formatItem = (item) => {\n    if (item.includes(\"event\")){\n      item=item.substring(6,item.length);\n    }\n    else {\n      item=\"sender's name\";\n    }\n    return item;\n  }\n  formatType = (type, values) => {\n    if (typeof values === \"undefined\") {\n      if (type === \"datetime\") {\n        return \"datetime-local\";\n      } else {\n        return \"text\";\n      }\n    } else {\n      return \"select\";\n    }\n  };\n\n  render() {\n    const { loadingData, properties, errorMessage } = this.state\n\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n\n      <div className=\"container\">\n      <div className=\"container mt-5\">\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='shield alternate' circular/>\n          Please help us stay safe by entering the information about the incident you wish to report.\n        </Header>\n        </Segment>\n      </div>\n          <Form className=\"container-fluid mt-4\" onSubmit={e => this.handleSubmit(e)}>\n            {Object.keys(properties).map((item) => {\n              if (item !== 'event_datetime') {\n                return (\n                  <FormInputField\n                    label={this.formatItem(item)}\n                    type={this.formatType(properties[item].type, properties[item].values)}\n                    placeholder={properties[item].example}\n                    propChanged={e => this.propChanged(e, item)}\n                    values={properties[item].values}\n                    key={this.formatItem(item)}\n                    errorMessage={errorMessage}\n                  ></FormInputField>\n                );\n              }\n            })}\n            <Button variant=\"dark\" type=\"submit\">Submit Alert</Button>\n          </Form>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\n\nclass Alert extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      eventDetails: this.props.data,\n    }\n    this.background = {\n      \"Low\": \"light\",\n      \"Medium\": \"warning\",\n      \"High\": \"danger\",\n    };\n  }\n\n  render() {\n    const { eventDetails } = this.state;\n    const { linkable } = this.props\n    return (\n      <Card bg={this.background[eventDetails[8]]} className=\"m-3\">\n        <Card.Header as=\"h5\">{ eventDetails[6] }</Card.Header>\n        <Card.Body>\n          <Card.Title>{ eventDetails[7] }</Card.Title>\n          <Card.Text>\n            { `${eventDetails[3]}, ${eventDetails[4]} ${eventDetails[2]}, ${eventDetails[5]} at ${eventDetails[1]}` }\n            <br />\n            { `Priority: ${eventDetails[8]}` }\n            <br />\n            { `Author: ${eventDetails[9]}` }\n          </Card.Text>\n          {linkable ? <Link to={`/thread/${this.props.id}`}><button type=\"button\" className=\"btn btn-dark\">View Thread</button></Link> : null}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Alert;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport Header from './Header';\nimport Alert from './Alert';\nimport { ListGroup, InputGroup, FormControl, Button } from 'react-bootstrap';\n\nclass ThreadView extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loadingData: false,\n      comments: [],\n      alert: [],\n    }\n    // console.log(\"Constructor: \", this.props.match.params.id )\n    this.apiServer = 'https://socnet.pythonanywhere.com/'\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      console.log(this.props);\n\n      const res = await axios.get(`${this.apiServer}threads/${this.props.match.params.id}`);\n      const alert = await axios.get(`${this.apiServer}alerts/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n        alert: alert.data[0],\n      })\n\n      console.log(this.state.comments);\n    } catch (e) {\n      console.log('error')\n    }\n  }\n\n  propChanged = (e) => {\n    const { value } = e.target;\n    console.log(value)\n    const payload = { \"text\": value }\n    this.setState({\n      payload: payload,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    event.preventDefault();\n    const { payload } = this.state;\n\n    try {\n      this.setState({ loadingData: true });\n      console.log(`${this.apiServer}threads/${this.props.match.params.id}`)\n      let res = await axios.put(`${this.apiServer}threads/${this.props.match.params.id}`, payload);\n      res = await axios.get(`${this.apiServer}threads/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  render() {\n    const { loadingData, comments, alert } = this.state;\n\n    if (loadingData) {\n      return(\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <Header title=\"Socnet\" />\n        \n        <Alert data={alert} id={alert[0]} />\n\n        <ListGroup>\n          {comments.map((comment, i) => {\n            return(\n              <ListGroup.Item key={i}>{comment[Object.keys(comment)[0]]}</ListGroup.Item>\n            )\n          })}\n        </ListGroup>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>Add a comment</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl onChange={this.propChanged} as=\"textarea\" aria-label=\"Add a comment\" />\n          <Button variant=\"dark\" type=\"submit\" onClick= {e => this.handleSubmit(e)}>Submit Comment</Button>\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nexport default ThreadView;\n","import React, { Component } from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nclass DropdownList extends Component {\n    state = {\n        isFetching: false, \n        multiple: true, \n        search: true, \n        value: []\n    };\n    \n    handleChange = (e, { value }) => {\n        this.setState({ value })\n        console.log(this.state.value)\n    };\n\n    handleClose = (e, {value}) => {\n        console.log(this.state.value);\n        console.log(\"Name\", this.props.placeholder)\n        this.props.handleDropdown(this.props.placeholder, this.state.value)\n    };\n\n    render() {\n        const { isFetching, multiple, search, value  } = this.state\n        return (\n            <Dropdown \n                fluid\n                selection\n                disabled = {isFetching}\n                loading = {isFetching}\n                multiple = {multiple}\n                search = {search}\n                placeholder={\"Select \" + this.props.placeholder}\n                options = {this.props.options} \n                noResultsMessage = \"No results found.\"\n                onChange={this.handleChange}\n                onClose = {this.handleClose}\n                selectOnNavigation={false}\n                value = {value}\n            />\n        )\n    }\n}\n\nexport default DropdownList;","import React, { Component } from 'react';\nimport { Dimmer, Loader, Grid, Button, Form, Header, Icon, Divider, Segment } from 'semantic-ui-react';\nimport DropdownList from \"./DropdownList\";\nimport createHistory from \"history/createBrowserHistory\";\nimport { withRouter } from 'react-router-dom';\nimport \"./Filters.css\"\nimport axios from 'axios'\n\nconst history = createHistory();\n\nclass FilterForm extends Component {\n    state = {\n        loading: false,\n        date: \"\", \n        severity: [], \n        type: [],\n        region: [], \n    };\n    \n    apiServer = 'https://socnet.pythonanywhere.com/';\n\n    // Sample Input: Development time only\n    severityList = {\n        name: \"severity\",\n        type: \"dropdown\",\n        optionList: [{key: \"H\", text: \"High\", value: \"high\"}, \n                    {key: \"L\", text: \"Low\", value: \"low\"}, \n                    {key: \"M\", text: \"Medium\", value: \"medium\"}]\n    };\n\n    regionList = {\n        name: \"region\", \n        type: \"dropdown\", \n        optionList: [{key: \"NY\", text: \"NY - New York\", value: \"NY\"}, \n                    { key: \"NJ\", text: \"NJ - New Jersey\", value: \"NJ\" },\n                    { key: \"CT\", text: \"CT - Conneticut\", value: \"CT\" }]\n    };\n\n    typeList = {\n        name: \"type\",\n        type: \"dropdown\",\n        optionList: [{ key: \"Fire\", text: \"Fire\", value: \"Fire\" },\n        { key: \"Earthquake\", text: \"Earthquake\", value: \"Earthquake\" },\n        { key: \"Ransomware\", text: \"Ransomware\", value: \"Ransomware\" }]\n    }\n\n    handleDropdown = (name, value) => {\n        this.setState({[name]: value}, () => {\n            console.log(name, value);\n            console.log(\"Data changed by dropdown\")\n            console.log(this.state.severity)\n        });\n    };\n    \n    // Excecuted when the back button is clicked\n    handleBack = () => {\n        // Soon to be depreciated\n        this.props.history.push('/main')\n    }\n\n    /// TODO: Merge handleChange with handelSubmit\n    // Debugging: Maintaining constant state \n    handleChange = (e, {name, value}) => { \n        this.setState({[name]:value})\n    }\n\n    handleValidation = (fields) => {\n        if (fields[\"date\"] || fields[\"severity\"].length > 0 || fields[\"type\"].length > 0 || fields[\"region\"].length > 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        const { loading, date, severity, type, region } = this.state\n        const apiServer = this.apiServer\n\n        let fields = {\n            date: date, \n            severity: severity, \n            type: type, \n            region: region\n        };\n        \n        if (this.handleValidation(fields)) {\n            console.log(\"Form had entries.\")\n            try {\n                // axios.post({ apiServer }, { fields })\n                //     .then(payload => {\n                //         console.log(\"Result form callback: \", payload)\n                //         console.log(payload.data)\n                \n                // this.setState({ loading: true });\n\n                \n                axios.get(`${this.apiServer}alerts`)\n                .then( payload => { \n                    this.setState({ loading: false });\n\n                    this.props.history.push('/alerts', { alerts: payload.data } ); \n                });\n\n            } catch (e) {\n                console.log(\"ERROR: UNABLE TO FETCH FILTERED RESULTS\")\n            }\n        } else {\n            // The user has not added any valid entries to the form\n            console.log(\"The form had no entries. Attempting to load all alerts.\")\n            try {\n                // this.setState({ loading: true });\n                axios.get(`${this.apiServer}alerts`)\n                .then (\n                    payload => { this.setState({ loading: false, });\n                    console.log(\"Alerts loaded. Payload looks like: \", payload.data)\n                    this.props.history.push('/alerts', {alerts: payload.data})\n                })\n                \n            } catch (e) {\n                console.log('ERROR: UNABLE TO GET ALL RESULTS.')\n            }\n        }\n    }\n\n    render() {\n        const { loading, severity, date, region, type } = this.state\n\n        if (loading) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div>\n                <Segment basic padded> <Header as=\"h1\"> Filter Alerts </Header> </Segment>\n                    <Segment padded='very' raised color='teal'>\n                        <Grid centered>\n                        <Form loading={loading} onSubmit={this.handleSubmit.bind(this)} size=\"large\" style={{ width: \"60%\" }}>\n                            <table align=\"center\" className=\"filters\" cellPadding=\"5px\">\n                                <tbody>\n                                    {/* Date */}\n                                    <tr>\n                                        <td> <label> Since (Date): </label>  </td>\n                                        <td>\n                                            {/* TO-DO: Input type date doesn't work with Safari and IE. */}\n                                            <input type=\"date\" placeholder=\"mm/dd/yyyy\"\n                                                onChange={(event) => this.setState({ date: event.target.value })}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr>  \n                                        <td> <label> Severity: </label> </td>\n                                        <td>\n                                            < DropdownList\n                                                placeholder={this.severityList.name}\n                                                options={this.severityList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr >\n                                        <td > <label> Type: </label> </td>\n                                        <td> \n                                            < DropdownList\n                                                placeholder={this.typeList.name}\n                                                options={this.typeList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr>\n                                        <td> <label> Region: </label></td>\n                                        <td> \n                                            < DropdownList\n                                                placeholder={this.regionList.name}\n                                                options={this.regionList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <br /> \n                            <Button animated onClick={e => this.handleBack.bind(this)}>\n                                <Button.Content visible> Back </Button.Content>\n                                <Button.Content hidden>\n                                    <Icon name='arrow left' />\n                                </Button.Content>\n                            </Button>\n\n                            <Button type=\"submit\" animated>\n                                <Button.Content visible>Submit</Button.Content>\n                                <Button.Content hidden>\n                                    <Icon name='arrow right' />\n                                </Button.Content>\n                            </Button>\n                        </Form>\n                    </Grid>\n                </Segment> \n                    <br />\n                    <strong> LEAVE BLANK FOR ALL </strong>\n                    <Divider />\n                    <strong> For testing before backend integration </strong>\n                    <pre>{JSON.stringify({ severity, date, region, type })}</pre>\n\n            </div>\n        );\n    }\n}\n\n\nexport default withRouter(FilterForm);","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateAlert from './components/CreateAlert';\nimport ThreadView from './components/ThreadView';\nimport FilterForm from './components/FilterForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={FilterForm} />\n            <Route exact path=\"/alerts\" component={Home} />\n            <Route exact path=\"/createAlert\" component={CreateAlert} />\n            <Route exact path=\"/thread/:id\" component={ThreadView} />  \n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}