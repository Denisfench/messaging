{"version":3,"sources":["config.js","fields.js","components/ThreadAlerts.js","components/Navbar.js","components/InfoField.js","components/Home.js","components/Snackbar.js","components/FormInputField.js","components/CreateAlert.js","components/Alert.js","components/ThreadView.js","components/DropdownList.js","components/FilterForm.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","REACT_APP_API_URL","config","flds","DATE","ID","ZIP","CITY","STATE","COUNTRY","TYPE","DESC","SEVERITY","AUTHOR","ACTIVE","ThreadAlerts","createHistory","props","background","apiServer","renderTableData","alerts","sort","a","b","x","y","map","alertData","id","date","region","title","description","active","icon","bgcolor","state","width","Table","Row","onClick","history","push","Cell","textAlign","style","color","Icon","name","loadingData","this","setState","location","axios","get","payload","data","console","log","updateWindowDimensions","window","addEventListener","bind","removeEventListener","innerWidth","Dimmer","inverted","Loader","size","padding","fixed","singleLine","padded","selectable","Header","HeaderCell","className","Body","Component","withRouter","NavBar","Menu","pointing","secondary","Item","to","fontSize","position","InfoField","numAlerts","label","Home","earliestAlert","latestAlert","earliest","latest","all","then","spread","responses","oldest_alert","number_of_alerts","newest_alert","CustomSnackbar","open","message","useStyles","makeStyles","theme","root","marginTop","spacing","handleClose","event","reason","Snackbar","autoHideDuration","onClose","elevation","variant","severity","FormInputField","type","placeholder","propChanged","values","errorMessage","InputGroup","FormControl","as","onChange","required","key","value","e","item","properties","target","handleSubmit","async","inputNode","preventDefault","Object","keys","payloadKey","undefined","moment","format","post","formatType","firstLetterUpperCase","elem","toUpperCase","slice","requiredProperties","res","Segment","basic","raised","Form","onSubmit","align","cellPadding","example","Button","Alert","eventDetails","linkable","Card","Title","Text","ThreadView","match","params","put","comments","alert","paddingBlockEnd","paddingBlockStart","Comment","Group","dividing","comment","i","Author","reply","Input","content","labelPosition","primary","DropdownList","isFetching","multiple","search","handleChange","handleDropdown","Dropdown","fluid","selection","disabled","loading","options","noResultsMessage","selectOnNavigation","FilterForm","filters","severityList","optionList","text","regionList","typeList","handleBack","handleValidation","fields","length","generateQueryString","queryString","toString","join","queryParams","class","animated","Content","visible","hidden","App","basename","exact","path","component","CreateAlert","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c1974e4.chunk.js","sourcesContent":["/**\n * Default API_URL of Indra would be production URL.\n * If the user has set the environment variable - REACT_APP_API_URL -\n * then that value will be set a the API_URL.\n * One of the ways to set REACT_APP_API_URL is by running the frontend using\n * the below command -\n *        REACT_APP_API_URL=http://127.0.0.1:8000/ npm start\n * (Make sure the backend is running at http://127.0.0.1:8000/)\n *\n *\n * Note: All environment variables in create-react-app setup needs to have\n * the prefix REACT_APP_\n * For more infromation - https://create-react-app.dev/docs/adding-custom-environment-variables/\n */\nlet API_URL = 'https://socnet.pythonanywhere.com/';\n\nif (process.env.REACT_APP_API_URL) {\n  API_URL = process.env.REACT_APP_API_URL;\n}\n\nconst config = { API_URL };\n\nexport default config;\n","/*\n *\n * This file holds constants for field positions for alert data.\n *\n * */\n\nconst ID = 0;\nconst DATE = 1;\nconst ZIP = 2;\nconst CITY = 3;\nconst STATE = 4;\nconst COUNTRY = 5;\nconst TYPE = 6;\nconst DESC = 7;\nconst SEVERITY = 8;\nconst AUTHOR = 9;\nconst ACTIVE = 10;\n\nconst flds = { DATE, ID, ZIP, CITY, STATE, COUNTRY, TYPE, DESC, SEVERITY, \n              AUTHOR, ACTIVE };\n\nexport default flds;\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Loader, Dimmer, Table, Icon } from 'semantic-ui-react'\nimport createHistory from \"history/createBrowserHistory\"\nimport { withRouter } from 'react-router-dom';\nimport config from '../config';\nimport flds from '../fields';\nimport './styles.css';\n\nconst history = createHistory();\n\nclass ThreadAlerts extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loadingData: false,\n            alerts: [],\n            width: 0\n        };\n    }\n\n    async componentDidMount() {\n        // In case we reached this page from the filters first page.\n        try {\n            this.setState({loadingData: true})\n            // console.log(\"ThreadAlerts.js/ComponentDidMount Props: \", this.props.location.state)\n            this.setState({\n                loadingData: false,\n                alerts: this.props.location.state.alerts\n            });\n        } catch (e) {  // In case we navigate straight to the main page\n            try {\n                this.setState({ loadingData: true });\n                const payload = await axios.get(`${config.API_URL}alerts`)\n                this.setState({\n                    loadingData: false,\n                    alerts: payload.data\n                });\n            } catch (e) {\n                this.setState({\n                    // must put message to the screen here!\n                    loadingData: false\n                })\n                console.log('Error while fetching alerts')\n            }\n            console.log(\"Error! \" , e , \" Alerts State: \", this.state.alerts)\n        }\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions.bind(this));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions.bind(this));\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth });\n        console.log(this.state.width);\n    }\n\n    background = {\n        \"Low\": \"#000000\",\n        \"Medium\": \"#FFCC00\",\n        \"High\": \"#CC0000\",\n    };\n\n    apiServer = 'https://socnet.pythonanywhere.com/';\n\n    renderTableData = (alerts) => {\n        alerts.sort((a, b) => {\n            let x = a[10],\n                y = b[10]\n            return x === y ? 0 : x > y ? 1 : -1;\n        });\n\n        return alerts.map((alertData) => {\n\n            const id = alertData[flds.ID]\n            const date = alertData[flds.DATE]\n            const region = alertData[flds.STATE]\n            const title = alertData[flds.TYPE]\n            const description = alertData[flds.DESC]\n            const active = alertData[flds.ACTIVE];\n            const icon = active === \"Active\" ? \"check\" : \"close\";\n            const bgcolor = this.background;\n\n            if (this.state.width > 450) {\n                return (\n                    <Table.Row\n                        onClick={() => {\n                            this.props.history.push(`/thread/${id}`)\n                        }\n                        }>\n                        <Table.Cell textAlign=\"left\"> {active} </Table.Cell>\n                        <Table.Cell style={{ color: bgcolor[alertData[flds.SEVERITY]] }}> {title} </Table.Cell>\n                        <Table.Cell > {description} </Table.Cell>\n                        <Table.Cell> {region} </Table.Cell>\n                        <Table.Cell textAlign=\"right\"> {date} </Table.Cell>\n                    </Table.Row>\n                )\n            } else {\n                return (\n                    <Table.Row\n                        onClick={() => {\n                            this.props.history.push(`/thread/${id}`)\n                        }\n                        }>\n                        <Table.Cell textAlign=\"left\"> <Icon name={icon} /> </Table.Cell>\n                        <Table.Cell style={{ color: bgcolor[alertData[flds.SEVERITY]] }}> {title} </Table.Cell>\n                        <Table.Cell> {region} </Table.Cell>\n                        <Table.Cell textAlign=\"right\"> {date} </Table.Cell>\n                    </Table.Row>\n                )\n            }\n\n        })\n    }\n\n    render() {\n\n        const { loadingData, alerts } = this.state;\n        //console.log(alerts);\n\n        if (loadingData) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div style={{padding: \"2%\"}}>\n                <Table fixed singleLine padded selectable color=\"teal\">\n                    <Table.Header>\n                        <Table.HeaderCell> Status </Table.HeaderCell>\n                        <Table.HeaderCell> Type </Table.HeaderCell>\n                        <Table.HeaderCell width={5} className=\"hide-mobile\"> Description </Table.HeaderCell>\n                        <Table.HeaderCell> Region </Table.HeaderCell>\n                        <Table.HeaderCell textAlign=\"right\"> Date </Table.HeaderCell>\n                    </Table.Header>\n                    <Table.Body>\n                        { this.renderTableData(alerts) }\n                    </Table.Body>\n                </Table>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ThreadAlerts);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Icon } from 'semantic-ui-react';\n\nexport default class NavBar extends Component {\n    render() {\n        return (\n            <Menu pointing secondary>\n                <Menu.Item active={true}>\n                    <span> \n                        <Link to=\"/alerts\" style={{ fontSize: 20, color: \"black\"}}> SOCNET </Link>\n                    </span>\n                </Menu.Item>\n                    \n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <Link to='/createAlert'>\n                            <Icon name=\"add\" /> Create Alert\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item> \n                        <Link to='/'>\n                            <Icon name=\"filter\" /> Filter Results\n                        </Link>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Menu>\n        )\n    }\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\n\nclass InfoField extends Component {\n/*\n * We need a constructor that gets passed:\n *   * label\n *   * data\n *   For ex., see Alert.js\n *   Line 83 in ThreadView.js shows the use of the constructor.\n */\n  constructor(props){\n    super(props);\n  }\n\n\n  state = {\n    numAlerts: \"\"\n  };\n\n    render() {\n        return (\n          <>\n            {`${this.props.label}`}: {this.props.data}\n          </>\n        )\n    }\n}\n\nexport default InfoField;\n","import React, { Component } from 'react';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport ThreadAlerts from './ThreadAlerts';\nimport './styles.css';\nimport NavBar from './Navbar';\nimport axios from 'axios';\nimport config from '../config';\nimport InfoField from './InfoField';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numAlerts: 0,\n      earliestAlert: '',\n      latestAlert: '',\n      loadingData: false,\n    };\n  }\n \n async componentDidMount() {\n   try {\n      this.setState({ loadingData: true });\n      let payload = await axios.get(`${config.API_URL}number_of_alerts`);\n      let earliest = await axios.get(`${config.API_URL}oldest_alert`);\n      let latest = await axios.get(`${config.API_URL}newest_alert`);\n      axios.all([payload, earliest, latest]).then(axios.spread((responses) => {\n        let payload = responses[0]\n        let earliest = responses[1]\n        let latest = responses[2]\n      }));\n\n      this.setState({\n        numAlerts: payload.data,\n        earliestAlert : earliest.data,\n        latestAlert :  latest.data,\n        loadingData: false,\n      })\n\n\n   } catch (e) {\n       console.log(\"Unable to fetch number of alerts.\")\n       this.setState({ loadingData: false });\n   }\n }\n\n  render() {\n    const loadingData  = this.state.loadingData;\n\n    // while fetching data from the API\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n    return (\n      <div className=\"container\">\n          {}\n        <NavBar />\n        <div id='left'>\n        <InfoField label={\"Earliest alert posted\"} data={this.state.earliestAlert.oldest_alert}/>\n        </div>\n        <InfoField label={\"Number of alerts\"} data={this.state.numAlerts.number_of_alerts}/>\n        <div id='right'>\n        <InfoField label={\"Lastest alert posted\"} data={this.state.latestAlert.newest_alert}/>\n        </div>\n        <ThreadAlerts />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\n\nclass CustomSnackbar extends Component {\n\n    state = {\n        open: this.props.open,\n        message: this.props.message,\n    };\n\n    useStyles = makeStyles((theme) => ({\n        root: {\n            width: \"100%\",\n            \"& > * + *\": {\n                marginTop: theme.spacing(2)\n            }\n        }\n    }));\n\n    handleClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        this.setState({open: false});\n    };\n\n    render () {\n        const { open, message }= this.state;\n        return (\n            <div >\n                <Snackbar open={ open } autoHideDuration = {6000} onClose = { this.handleClose } >\n                <MuiAlert elevation={6} variant=\"filled\" onClose={ this.handleClose } severity=\"success\" >\n                    {message} \n                </MuiAlert>\n                </Snackbar>\n            </div>\n        );\n    }\n    \n}\n\nexport default CustomSnackbar;\n","import React from 'react';\nimport { FormControl, InputGroup } from 'react-bootstrap';\n\nfunction FormInputField(props) {\n\n  const { type, placeholder, propChanged, values, errorMessage } = props;\n\n  if (typeof values !== \"undefined\") {\n    return (\n      <InputGroup className=\"mb-3\">\n        \n        < FormControl\n          placeholder={placeholder}\n          as={type}\n          onChange={propChanged}\n          required\n        >\n          <option key=\"Choose...\">Choose...</option>\n          {values.map((value) => {\n            return (<option key={value}>{value}</option>);\n          })}\n        </FormControl>\n        <div>{errorMessage}</div>\n      </InputGroup>\n    );\n  } else {\n    return (\n      <InputGroup className=\"mb-3\">\n        {/* <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">{label}</InputGroup.Text>\n        </InputGroup.Prepend> */}\n        <FormControl\n          placeholder={placeholder}\n          type={type}\n          onChange={propChanged}\n          required\n        />\n      </InputGroup>\n    );\n  }\n}\n\nexport default FormInputField;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Loader, Dimmer, Header, Segment } from 'semantic-ui-react';\nimport { Form , Button } from 'react-bootstrap';\nimport CustomSnackbar from './Snackbar';\nimport config from '../config';\n\nimport NavBar from './Navbar';\nimport FormInputField from './FormInputField';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingData: false,\n      properties: {},\n      requiredProperties: [],\n      payload: {},\n      open: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      const res = await axios.get(`${config.API_URL}form`);\n      this.setState({\n        properties: res.data.properties,\n        requiredProperties: res.data.required,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log('error')\n    }\n  }\n\n  propChanged = (e, item) => {\n\n    const { properties } = this.state;\n    const { value } = e.target;\n    console.log(\"props changed properties \", properties);\n    properties[item].value = value;\n    this.setState({\n      payload: properties,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    console.log(\"event is \", this.inputNode);\n    console.log(\"before payload\", this.state.payload);\n    event.preventDefault();\n\n    const { payload } = this.state;\n    const { history } = this.props;\n\n    Object.keys(payload).map((payloadKey) => {\n      if (payloadKey === \"severity\" && payload[payloadKey].value === undefined) {\n        payload[payloadKey] = 'Low';\n      } else\n        payload[payloadKey] = payload[payloadKey].value;\n    });\n\n    payload[\"datetime\"] = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n    console.log(\"after payload\", moment().format(\"YYYY-MM-DD hh:mm:ss\"));\n    \n    try {\n      await axios.post(`${config.API_URL}alerts`, payload);\n      this.setState({open: true})\n      // Commented by Harman Chawla. \n      // Uncomment this if you want to redirect the user to alerts table\n      // when an alert is created.\n      //history.push('/alerts'); \n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  formatType = (type, values) => {\n    if (typeof values === \"undefined\") {\n      if (type === \"datetime\") {\n        return \"datetime-local\";\n      } else {\n        return \"text\";\n      }\n    } else {\n      return \"select\";\n    }\n  };\n\n  firstLetterUpperCase = (elem) => {\n    return elem[0].toUpperCase() + elem.slice(1) + \": \"\n  }\n\n  render() {\n    const { loadingData, properties, errorMessage } = this.state\n\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n\n      <div className=\"container\">\n        < NavBar />\n        <Segment basic padded>\n          <Header as=\"h1\"> Create Alerts </Header>\n          <Header> Please help us stay safe by entering the information about the incident you wish to report.</Header>\n        </Segment>\n      {/* Commenting the code below. Deprecated in favor of the new UI. */}\n      {/* <div className=\"container mt-5\">\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='shield alternate' circular/>\n          Please help us stay safe by entering the information about the incident you wish to report.\n        </Header>\n        </Segment>\n      </div> */}\n        <Segment padded='very' raised color='teal'>\n          <Form className=\"container-fluid mt-4\" onSubmit={e => this.handleSubmit(e)}>\n            <table align=\"center\" cellPadding=\"5px\"> \n              <tbody>\n                {Object.keys(properties).map((item) => {\n                  //console.log(item);\n                  if (item !== 'datetime') {\n                    return (\n                      <tr> \n                        <td style={{textAlign: \"left\"}}>\n                          <label> { this.firstLetterUpperCase(item) } </label>\n                        </td>\n                        <td> \n                          <FormInputField\n                            // label={this.formatItem(item)}\n                            type={this.formatType(properties[item].type, properties[item].values)}\n                            placeholder={properties[item].example}\n                            propChanged={e => this.propChanged(e, item)}\n                            values={properties[item].values}\n                            // key={this.formatItem(item)}\n                            errorMessage={errorMessage}\n                          ></FormInputField>\n                        </td>\n                      </tr>\n                    );\n                  }\n                })}\n              </tbody>\n            </table>\n            <Button type=\"submit\"> Submit Alert  </Button>\n          </Form>\n        </Segment>\n        <CustomSnackbar open={this.state.open} message=\"Successfully created!\"/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport flds from '../fields';\n\nclass Alert extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      eventDetails: this.props.data,\n    }\n    this.background = {\n      \"Low\": \"light\",\n      \"Medium\": \"warning\",\n      \"High\": \"danger\",\n    };\n    this.bgcolor = {\n      \"Low\": \"#FFFFFF\",\n      \"Medium\": \"#FFCC00\",\n      \"High\": \"#CC0000\",\n    }\n  }\n\n  render() {\n    const { eventDetails } = this.state;\n    const { linkable } = this.props\n    return (\n      <Card className=\"m-3\">\n        <Card.Header style={{background: this.bgcolor[eventDetails[flds.SEVERITY]]}}  as=\"h5\"> {eventDetails[flds.TYPE]} </Card.Header>\n        <Card.Body>\n          <Card.Title>{ eventDetails[flds.DESC] }</Card.Title>\n          <Card.Text>\n            { `${eventDetails[flds.CITY]}, ${eventDetails[flds.STATE]}\n            ${eventDetails[flds.ZIP]}, ${eventDetails[flds.COUNTRY]}\n            at ${eventDetails[flds.DATE]}` }\n            <br />\n            { `Priority: ${eventDetails[flds.SEVERITY]}` }\n            <br />\n            { `Author: ${eventDetails[flds.AUTHOR]}` }\n          </Card.Text>\n          {linkable ? <Link to={`/thread/${this.props.id}`}><button type=\"button\" className=\"btn btn-dark\">View Thread</button></Link> : null}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Icon, Header, Loader, Dimmer, Comment, Form, Button } from 'semantic-ui-react';\nimport NavBar from './Navbar';\nimport Alert from './Alert';\nimport config from '../config';\n\nclass ThreadView extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loadingData: false,\n      comments: [],\n      alert: [],\n    }\n    // console.log(\"Constructor: \", this.props.match.params.id )\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      console.log(this.props);\n\n      const res = await axios.get(`${config.API_URL}threads/${this.props.match.params.id}`);\n      const alert = await axios.get(`${config.API_URL}alerts/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n        alert: alert.data[0],\n      })\n\n      console.log(this.state.comments);\n    } catch (e) {\n      console.log('error')\n    }\n  }\n\n  propChanged = (e) => {\n    const { value } = e.target;\n    console.log(value)\n    const payload = { \"text\": value }\n    this.setState({\n      payload: payload,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    event.preventDefault();\n    const { payload } = this.state;\n\n    try {\n      this.setState({ loadingData: true });\n      console.log(`${config.API_URL}threads/${this.props.match.params.id}`)\n      let res = await axios.put(`${config.API_URL}threads/${this.props.match.params.id}`, payload);\n      res = await axios.get(`${config.API_URL}threads/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  render() {\n    const { loadingData, comments, alert } = this.state;\n\n    if (loadingData) {\n      return(\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        < NavBar />\n        <Alert data={alert} id={alert[0]} />\n\n        <div style={{ textAlign: \"left\", paddingBlockEnd: 15, paddingBlockStart: 15 }} >\n          <Comment.Group>\n            <Header as='h3' dividing>\n              Comments\n            </Header>\n            {comments.map((comment, i) => {\n              return (\n                <Comment>\n                  <Comment.Author style={{ fontSize: 15 }}> <Icon name=\"user\" /> Anonymous </Comment.Author>\n                  <Comment.Text style={{ fontSize: 15 }}> {comment[Object.keys(comment)[0]]} </Comment.Text>\n                </Comment>\n              )\n            })\n            }\n            <Form reply>\n              <Form.Input placeholder=\"Type your comment here.\" onChange={this.propChanged} />\n              <Button content='Add Comment' labelPosition='left' icon='edit' primary onClick={e => this.handleSubmit(e)} />\n            </Form>\n          </Comment.Group>\n        </div>\n\n        {/* <ListGroup>\n          {comments.map((comment, i) => {\n            return (\n              <ListGroup.Item key={i}>{comment[Object.keys(comment)[0]]}</ListGroup.Item>\n            )\n          })}\n        </ListGroup>\n        \n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>Add a comment</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl onChange={this.propChanged} as=\"textarea\" aria-label=\"Add a comment\" />\n          <Button variant=\"dark\" type=\"submit\" onClick={e => this.handleSubmit(e)}>Submit Comment</Button>\n        </InputGroup>\n        <br/> \n        <br /> */}\n        \n        {/*  Dennis' Code: */}\n        {/* <div class=\"col-auto\">\n        <div class=\"form-check form-check-inline\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"></input>\n        <label class=\"form-check-label\" for=\"inlineRadio1\">1</label>\n        </div> \n        </div> */}\n\n      </div>\n    );\n  }\n}\n\nexport default ThreadView;\n","import React, { Component } from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\n// The module requires three props:\n// // placeholder: identify the dropdown menu\n// // options: array of dropdown options structured as {key, name, value}\n// // handleDropdown: a handler function which accepts the selcted values \n\nclass DropdownList extends Component {\n    state = {\n        isFetching: false,  // animates a spinning wheel during search\n        multiple: true, \n        search: true, \n        value: [] \n    };\n    \n    // Maintain the state as the user changes the selection(s).\n    handleChange = (e, { value }) => {\n        this.setState({ value })\n        // console.log(this.state.value)\n    };\n\n    // Once the dropdown is closed, the control is packed back \n    // to a handler. placeholder is used as an identifier and \n    // value holds the dropdown selections (empty array if no selections)\n    handleClose = (e, {value}) => {\n        //console.log(this.state.value);\n        //console.log(\"Name\", this.props.placeholder)\n        this.props.handleDropdown(this.props.placeholder, this.state.value)\n    };\n\n    render() {\n        const { isFetching, multiple, search, value  } = this.state\n        return (\n            <Dropdown \n                fluid\n                selection\n                disabled = {isFetching}\n                loading = {isFetching}\n                multiple = {multiple}\n                search = {search}\n                placeholder={\"Select \" + this.props.placeholder}\n                options = {this.props.options} \n                noResultsMessage = \"No results found.\"\n                onChange={this.handleChange}\n                onClose = {this.handleClose}\n                selectOnNavigation={false}\n                value = {value}\n            />\n        )\n    }\n}\n\nexport default DropdownList;","import React, { Component } from 'react';\nimport { Dimmer, Loader, Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport { withRouter } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\n\nimport axios from 'axios';\nimport DropdownList from \"./DropdownList\";\nimport NavBar from './Navbar';\nimport createHistory from \"history/createBrowserHistory\";\nimport config from '../config';\n\n\nconst history = createHistory();\n\nclass FilterForm extends Component {\n    state = {\n        loading: false,\n        date: \"\", \n        severity: [], \n        type: [],\n        region: [], \n        filters: \"\"\n    };\n    \n    apiServer = 'https://socnet.pythonanywhere.com/';\n    // devApiServer = \"http://127.0.0.1:8000/\";\n\n    async componentDidMount() {\n        try {\n            axios.get(`${config.API_URL}filters`)\n            .then( payload => {\n                this.setState({filters: payload.data})\n                //this.transformFilterData();\n            });\n        } catch (e) {\n            console.log(\"Unable to fetch values for the filter form.\")\n        }\n\n    }\n\n    // Sample Input: Development time only\n    severityList = {\n        name: \"severity\",\n        type: \"dropdown\",\n        optionList: [{key: \"H\", text: \"High\", value: \"High\"}, \n                    {key: \"L\", text: \"Low\", value: \"Low\"}, \n                    {key: \"M\", text: \"Medium\", value: \"Medium\"}]\n    };\n\n    regionList = {\n        name: \"region\", \n        type: \"dropdown\", \n        optionList: [{key: \"NY\", text: \"NY - New York\", value: \"New York\"}, \n                    { key: \"NJ\", text: \"NJ - New Jersey\", value: \"New Jersey\" },\n                    { key: \"CT\", text: \"CT - Conneticut\", value: \"Conneticut\" }]\n    };\n\n    typeList = {\n        name: \"type\",\n        type: \"dropdown\",\n        optionList: [{ key: \"Fire\", text: \"Fire\", value: \"Fire\" },\n        { key: \"Earthquake\", text: \"Earthquake\", value: \"Earthquake\" },\n        { key: \"Ransomware\", text: \"Ransomware\", value: \"Ransomware\" },\n        { key: \"Malware\", text: \"Malware\", value: \"Malware\"}]\n    }\n\n    handleDropdown = (name, value) => {\n        this.setState({[name]: value}, () => {\n            console.log(name, value);\n            console.log(\"Data changed by dropdown\")\n            console.log(this.state.severity)\n        });\n    };\n    \n    // Excecuted when the back button is clicked\n    handleBack = () => {\n        // Soon to be depreciated\n        this.props.history.push('/alerts')\n    }\n\n    handleChange = (e, {name, value}) => { \n        this.setState({[name]:value})\n    }\n\n    handleValidation = () => {\n        let fields = {\n            date: this.state.date,\n            severity: this.state.severity,\n            type: this.state.type,\n            region: this.state.region\n        };\n\n        if (fields[\"date\"] || fields[\"severity\"].length > 0 || fields[\"type\"].length > 0 || fields[\"region\"].length > 0) {\n            console.log(\"User chose a filter!\")\n            return true\n        } else {\n            return false\n        }\n    }\n\n    generateQueryString = () => {\n        const { loading, date, severity, type, region } = this.state;\n        var queryString = [];\n\n        if (region.length > 0) {\n            queryString.push(\"region=\" + region.toString());\n        }\n\n        if (type.length > 0) {\n            queryString.push(\"type=\" + type.toString());\n        }\n\n        if (severity.length > 0) {\n            queryString.push(\"severity=\" + severity.toString());\n        }\n\n        if (date.length > 0) {\n            queryString.push(\"date=\" + date)\n        }\n\n        queryString = queryString.join(\"&\");\n        return queryString\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault()\n        if (this.handleValidation()) {\n            try {\n                // console.log(this.state.region)\n                // await axios.get(`${this.apiServer}alerts`, {\n                //     params: {\n                //         region: this.state.region.toString(),\n                //         type: this.state.region.toString(),\n                //         severity: this.state.severity.toString(),\n                //         date: this.state.date\n                //     }\n                // })\n                //     .then(payload => {\n                //         this.setState({ loading: false });\n                //         this.props.history.push('/alerts', { alerts: payload.data });\n                //     });\n                const queryParams = this.generateQueryString()\n                console.log(\"Query Parameters: \", queryParams)\n                await axios.get(`${this.apiServer}alerts?${queryParams}`)\n                    .then(payload => {\n                        this.setState({ loading: false });\n                        this.props.history.push('/alerts', { alerts: payload.data });\n                    });\n            } catch (e) {\n                console.log(\"ERROR: UNABLE TO FETCH FILTERED RESULTS\")\n            }\n        } else {\n            // The user has not added any valid entries to the form\n            console.log(\"The form had no entries. Attempting to load all alerts.\")\n            try {\n                // this.setState({ loading: true });\n                await axios.get(`${this.apiServer}alerts`)\n                .then (\n                    payload => { this.setState({ loading: false, });\n                    console.log(\"Alerts loaded. Payload looks like: \", payload.data)\n                    this.props.history.push('/alerts', {alerts: payload.data})\n                })\n                \n            } catch (e) {\n                console.log('ERROR: UNABLE TO GET ALL RESULTS.')\n            }\n        }\n    }\n\n    render() {\n\n        const loading = this.state.loading;\n\n        if (loading) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div class=\"container\">\n                < NavBar />\n                <Segment basic padded>\n                    <Header as=\"h1\"> Filter Alerts </Header>\n                    <Header> Leave all fields blank to see all results.</Header>\n                </Segment>\n                <Segment padded='very' raised color='teal'>\n                    <Form className=\"container-fluid mt-4\" onSubmit={this.handleSubmit.bind(this)}>\n                        <table align=\"center\" cellPadding=\"5px\">\n                            <tbody>\n                                {/* Date */}\n                                <tr>\n                                    <td> <label> Since (Date): </label>  </td>\n                                    <td>\n                                        {/* TO-DO: Input type date doesn't work with Safari and IE. */}\n                                        {/* Work around: Text input is formated into a datetime at the backend */}\n                                        <input type=\"date\" placeholder=\"mm/dd/yyyy\"\n                                            onChange={(event) => this.setState({ date: event.target.value })}\n                                        />\n                                    </td>\n                                </tr>\n\n                                <tr>  \n                                    <td> <label> Severity: </label> </td>\n                                    <td>\n                                        < DropdownList\n                                            placeholder={this.severityList.name}\n                                            options={this.severityList.optionList}\n                                            handleDropdown={this.handleDropdown}\n                                        />\n                                    </td>\n                                </tr>\n\n                                <tr >\n                                    <td > <label> Type: </label> </td>\n                                    <td> \n                                        < DropdownList\n                                            placeholder={this.typeList.name}\n                                            options={this.typeList.optionList}\n                                            handleDropdown={this.handleDropdown}\n                                        />\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td> <label> Region: </label></td>\n                                    <td> \n                                        < DropdownList\n                                            placeholder={this.regionList.name}\n                                            options={this.regionList.optionList}\n                                            handleDropdown={this.handleDropdown}\n                                        />\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <br /> \n                        <Button animated onClick={e => this.handleBack.bind(this)}>\n                            <Button.Content visible> Back </Button.Content>\n                            <Button.Content hidden>\n                                <Icon name='arrow left' />\n                            </Button.Content>\n                        </Button>\n\n                        <Button type=\"submit\" animated>\n                            <Button.Content visible>Submit</Button.Content>\n                            <Button.Content hidden>\n                                <Icon name='arrow right' />\n                            </Button.Content>\n                        </Button>\n                    </Form>\n                </Segment> \n\n                {/* DEVELOPMENT ONLY: Uncomment below to see state as it gets changed. */}\n                {/*  <br />\n                    <pre>{JSON.stringify({ severity, date, region, type })}</pre> \n                */}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(FilterForm);\n","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateAlert from './components/CreateAlert';\nimport ThreadView from './components/ThreadView';\nimport FilterForm from './components/FilterForm';\n\n/*\n * 1) ThreadView --> AlertDetail\n * 2) FilterForm --> SearchAlerts\n * 3) Home --> ViewAlerts\n * 4) ThreadAlerts --> AlertsTable\n */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter  basename=\"/socnet/webapp.html#\">\n        <Switch>\n            <Route exact path=\"/\" component={FilterForm} />\n            <Route exact path=\"/alerts\" component={Home} />\n            <Route exact path=\"/createAlert\" component={CreateAlert} />\n            <Route exact path=\"/thread/:id\" component={ThreadView} />  \n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}