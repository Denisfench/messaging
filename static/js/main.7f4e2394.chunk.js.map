{"version":3,"sources":["components/Header.js","components/ThreadAlerts.js","components/Navbar.js","components/Home.js","components/FormInputField.js","components/CreateAlert.js","components/Alert.js","components/ThreadView.js","components/DropdownList.js","components/FilterForm.js","components/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","to","title","ThreadAlerts","createHistory","background","apiServer","renderTableData","alerts","map","alertData","id","date","region","description","bgcolor","Table","Row","onClick","history","push","Cell","style","color","textAlign","state","loadingData","this","setState","console","log","location","axios","get","payload","data","Dimmer","active","inverted","Loader","size","padding","fixed","singleLine","padded","selectable","HeaderCell","width","Body","Component","withRouter","NavBar","Menu","pointing","secondary","Item","fontSize","position","Icon","name","Home","className","FormInputField","label","type","placeholder","propChanged","values","errorMessage","InputGroup","FormControl","as","onChange","required","key","value","e","item","properties","target","handleSubmit","event","a","async","inputNode","preventDefault","Object","keys","payloadKey","undefined","moment","format","post","formatItem","includes","substring","length","formatType","firstLetterUpperCase","toUpperCase","slice","requiredProperties","bind","res","Segment","basic","raised","Form","onSubmit","align","cellPadding","example","Button","Alert","eventDetails","linkable","Card","Title","Text","ThreadView","match","params","put","comments","alert","class","ListGroup","comment","i","Prepend","aria-label","variant","DropdownList","isFetching","multiple","search","handleChange","handleClose","handleDropdown","Dropdown","fluid","selection","disabled","loading","options","noResultsMessage","onClose","selectOnNavigation","FilterForm","severity","filters","severityList","optionList","text","regionList","typeList","handleBack","handleValidation","fields","generateQueryString","queryString","toString","join","queryParams","then","Grid","centered","autoComplete","animated","Content","visible","hidden","Test","transformFilterData","App","basename","exact","path","component","CreateAlert","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+XAceA,MAVf,SAAgBC,GACd,OACE,oCACE,kBAAC,IAAD,CAAMC,GAAK,KACP,4BAAKD,EAAME,U,4DCAfC,GAFUC,M,YAGZ,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KA+BVK,WAAa,CACT,IAAO,UACP,OAAU,UAEV,KAAQ,WApCO,EAwCnBC,UAAY,qCAxCO,EA0CnBC,gBAAkB,SAACC,GACf,OAAOA,EAAOC,KAAI,SAACC,GACf,IAAMC,EAAKD,EAAU,GACfE,EAAOF,EAAU,GACjBG,EAASH,EAAU,GACnBR,EAAQQ,EAAU,GAClBI,EAAcJ,EAAU,GAExBK,EAAU,EAAKV,WAErB,OACI,kBAACW,EAAA,EAAMC,IAAP,CACIC,QAAW,WACP,EAAKlB,MAAMmB,QAAQC,KAAnB,kBAAmCT,MAIvC,kBAACK,EAAA,EAAMK,KAAP,iBACA,kBAACL,EAAA,EAAMK,KAAP,CAAYC,MAAO,CAAEC,MAAOR,EAAQL,EAAU,MAA9C,IAAuDR,EAAvD,KACA,kBAACc,EAAA,EAAMK,KAAP,SAAcP,EAAd,KACA,kBAACE,EAAA,EAAMK,KAAP,SAAcR,EAAd,KACA,kBAACG,EAAA,EAAMK,KAAP,CAAYG,UAAU,SAAtB,IAAgCZ,EAAhC,UA7DZ,EAAKa,MAAQ,CACTC,aAAa,EACblB,OAAQ,IAJG,E,kKAWXmB,KAAKC,SAAS,CAACF,aAAa,IAC5BG,QAAQC,IAAI,4CAA6CH,KAAK3B,MAAM+B,SAASN,OAC7EE,KAAKC,SAAS,CACVF,aAAa,EACblB,OAAQmB,KAAK3B,MAAM+B,SAASN,MAAMjB,S,gEAIlCmB,KAAKC,SAAS,CAAEF,aAAa,I,oBACPM,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,Y,QAAhB4B,E,OACNP,KAAKC,SAAS,CACVF,aAAa,EACblB,OAAQ0B,EAAQC,O,kDAGpBN,QAAQC,IAAI,gC,QAEhBD,QAAQC,IAAI,UAAZ,KAA4B,kBAAmBH,KAAKF,MAAMjB,Q,gGAyCxD,IAAD,EAE2BmB,KAAKF,MAA7BC,EAFH,EAEGA,YAAalB,EAFhB,EAEgBA,OAGrB,OAFAqB,QAAQC,IAAItB,GAERkB,EAEI,kBAACU,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACnB,kBAACC,EAAA,EAAD,CAAQC,KAAK,WAAb,gCAMR,yBAAKlB,MAAO,CAACmB,QAAS,OAClB,kBAACzB,EAAA,EAAD,CAAO0B,OAAK,EAACC,YAAU,EAACC,QAAM,EAACC,YAAU,EAACtB,MAAM,QAC5C,kBAACP,EAAA,EAAMjB,OAAP,KACI,kBAACiB,EAAA,EAAM8B,WAAP,iBACA,kBAAC9B,EAAA,EAAM8B,WAAP,eACA,kBAAC9B,EAAA,EAAM8B,WAAP,CAAkBC,MAAO,GAAzB,iBACA,kBAAC/B,EAAA,EAAM8B,WAAP,iBACA,kBAAC9B,EAAA,EAAM8B,WAAP,CAAkBtB,UAAU,SAA5B,WAEJ,kBAACR,EAAA,EAAMgC,KAAP,KACMrB,KAAKpB,gBAAgBC,U,GA9FpByC,cAsGZC,cAAW/C,G,iBC7EXgD,E,iLA3BP,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,GACpB,kBAACF,EAAA,EAAKG,KAAN,CAAWlB,QAAQ,GACf,0BAAMf,MAAO,CAACkC,SAAU,KAAxB,WAKJ,kBAACJ,EAAA,EAAKA,KAAN,CAAWK,SAAS,SAChB,kBAACL,EAAA,EAAKG,KAAN,KACI,kBAAC,IAAD,CAAMtD,GAAG,gBACL,kBAACyD,EAAA,EAAD,CAAMC,KAAK,QADf,kBAKJ,kBAACP,EAAA,EAAKG,KAAN,KACI,kBAAC,IAAD,CAAMtD,GAAG,KACL,kBAACyD,EAAA,EAAD,CAAMC,KAAK,WADf,0B,GAlBHV,aC0DNW,E,YArDb,WAAY5D,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,MAAQ,CACXC,aAAa,GAEf,EAAKpB,UAAY,qCALA,E,sEA6BjB,OAHqBqB,KAAKF,MAAMC,YAK5B,kBAACU,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQC,KAAK,WAAb,YAQJ,yBAAKqB,UAAU,aAIb,kBAAE,EAAF,MACA,kBAAC,EAAD,W,GA9CWZ,a,4CCkCJa,MAvCf,SAAwB9D,GAEkDA,EAAhE+D,MAFsB,IAEfC,EAAyDhE,EAAzDgE,KAAMC,EAAmDjE,EAAnDiE,YAAaC,EAAsClE,EAAtCkE,YAAaC,EAAyBnE,EAAzBmE,OAAQC,EAAiBpE,EAAjBoE,aAEvD,MAAsB,qBAAXD,EAEP,kBAACE,EAAA,EAAD,CAAYR,UAAU,QAEpB,kBAAES,EAAA,EAAF,CACEL,YAAaA,EACbM,GAAIP,EACJQ,SAAUN,EACVO,UAAQ,GAER,4BAAQC,IAAI,aAAZ,aACCP,EAAO1D,KAAI,SAACkE,GACX,OAAQ,4BAAQD,IAAKC,GAAQA,OAGjC,6BAAMP,IAKR,kBAACC,EAAA,EAAD,CAAYR,UAAU,QAIpB,kBAACS,EAAA,EAAD,CACEL,YAAaA,EACbD,KAAMA,EACNQ,SAAUN,EACVO,UAAQ,M,oCCiIHb,E,YA3Jb,WAAY5D,GAAQ,IAAD,8BACjB,4CAAMA,KA2BRkE,YAAc,SAACU,EAAGC,GAAU,IAElBC,EAAe,EAAKrD,MAApBqD,WACAH,EAAUC,EAAEG,OAAZJ,MACR9C,QAAQC,IAAI,4BAA6BgD,GACzCA,EAAWD,GAAMF,MAAQA,EACzB,EAAK/C,SAAS,CACZM,QAAS4C,KAnCM,EAuCnBE,aAAe,SAAMC,GAAN,iBAAAC,EAAAC,OAAA,uDACbtD,QAAQC,IAAI,YAAa,EAAKsD,WAC9BvD,QAAQC,IAAI,iBAAkB,EAAKL,MAAMS,SACzC+C,EAAMI,iBAEEnD,EAAY,EAAKT,MAAjBS,QACAf,EAAY,EAAKnB,MAAjBmB,QAERmE,OAAOC,KAAKrD,GAASzB,KAAI,SAAC+E,GACL,mBAAfA,QAAiEC,IAA9BvD,EAAQsD,GAAYb,MACzDzC,EAAQsD,GAAc,MAEtBtD,EAAQsD,GAActD,EAAQsD,GAAYb,SAG9CzC,EAAO,eAAqBwD,MAASC,OAAO,uBAC5C9D,QAAQC,IAAI,gBAAiB4D,MAASC,OAAO,wBAhBhC,qBAAAT,EAAA,MAmBLlD,IAAM4D,KAAN,UAAc,EAAKtF,UAAnB,UAAsC4B,IAnBjC,QAoBXf,EAAQC,KAAK,WApBF,kDAsBXS,QAAQC,IAAR,MAtBW,0DAvCI,EAkEnB+D,WAAa,SAAChB,GAOZ,OALEA,EADEA,EAAKiB,SAAS,SACXjB,EAAKkB,UAAU,EAAElB,EAAKmB,QAGtB,iBAvEU,EA2EnBC,WAAa,SAACjC,EAAMG,GAClB,MAAsB,qBAAXA,EACI,aAATH,EACK,iBAEA,OAGF,UAnFQ,EAuFnBkC,qBAAuB,SAACrB,GACtB,OAAOA,EAAK,GAAGsB,cAAgBtB,EAAKuB,MAAM,GAAK,MAtF/C,EAAK3E,MAAQ,CACXC,aAAa,EACboD,WAAY,GACZuB,mBAAoB,GACpBnE,QAAS,IAGX,EAAK5B,UAAY,qCAEjB,EAAK0E,aAAe,EAAKA,aAAasB,KAAlB,gBAXH,E,yKAgBf3E,KAAKC,SAAS,CAAEF,aAAa,I,mBACXM,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,U,OAAZiG,E,OACN5E,KAAKC,SAAS,CACZkD,WAAYyB,EAAIpE,KAAK2C,WACrBuB,mBAAoBE,EAAIpE,KAAKsC,SAC7B/C,aAAa,I,gDAGfG,QAAQC,IAAI,S,yFAmEN,IAAD,SAC2CH,KAAKF,MAA/CC,EADD,EACCA,YAAaoD,EADd,EACcA,WAAYV,EAD1B,EAC0BA,aAEjC,OAAI1C,EAEA,kBAACU,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQC,KAAK,WAAb,YAOJ,yBAAKqB,UAAU,aACb,kBAAC2C,EAAA,EAAD,CAASC,OAAK,EAAC7D,QAAM,GACnB,kBAAC,IAAD,CAAQ2B,GAAG,MAAX,mBACA,kBAAC,IAAD,sGAWF,kBAACiC,EAAA,EAAD,CAAS5D,OAAO,OAAO8D,QAAM,EAACnF,MAAM,QAClC,kBAACoF,EAAA,EAAD,CAAM9C,UAAU,uBAAuB+C,SAAU,SAAAhC,GAAC,OAAI,EAAKI,aAAaJ,KACtE,2BAAOiC,MAAM,SAASC,YAAY,OAChC,+BACGxB,OAAOC,KAAKT,GAAYrE,KAAI,SAACoE,GAC5B,GAAa,mBAATA,EACF,OACE,4BACE,4BACE,mCAAS,EAAKqB,qBAAqB,EAAKL,WAAWhB,IAAnD,MAEF,4BACE,kBAAC,EAAD,CACEd,MAAO,EAAK8B,WAAWhB,GACvBb,KAAM,EAAKiC,WAAWnB,EAAWD,GAAMb,KAAMc,EAAWD,GAAMV,QAC9DF,YAAaa,EAAWD,GAAMkC,QAC9B7C,YAAa,SAAAU,GAAC,OAAI,EAAKV,YAAYU,EAAGC,IACtCV,OAAQW,EAAWD,GAAMV,OACzBO,IAAK,EAAKmB,WAAWhB,GACrBT,aAAcA,WAU9B,kBAAC4C,EAAA,EAAD,CAAQhD,KAAK,UAAb,0B,GApJOf,a,QCoCJgE,E,YAvCb,WAAYjH,GAAO,IAAD,8BAChB,4CAAMA,KACDyB,MAAQ,CACXyF,aAAc,EAAKlH,MAAMmC,MAE3B,EAAK9B,WAAa,CAChB,IAAO,QACP,OAAU,UACV,KAAQ,UAEV,EAAKU,QAAU,CACb,IAAO,UACP,OAAU,UACV,KAAQ,WAbM,E,sEAiBR,IACAmG,EAAiBvF,KAAKF,MAAtByF,aACAC,EAAaxF,KAAK3B,MAAlBmH,SACR,OACE,kBAACC,EAAA,EAAD,CAAMvD,UAAU,OACd,kBAACuD,EAAA,EAAKrH,OAAN,CAAauB,MAAO,CAACjB,WAAYsB,KAAKZ,QAAQmG,EAAa,KAAO3C,GAAG,MAAO2C,EAAa,IACzF,kBAACE,EAAA,EAAKpE,KAAN,KACE,kBAACoE,EAAA,EAAKC,MAAN,KAAcH,EAAa,IAC3B,kBAACE,EAAA,EAAKE,KAAN,eACOJ,EAAa,GADpB,aAC2BA,EAAa,GADxC,YAC8CA,EAAa,GAD3D,aACkEA,EAAa,GAD/E,eACwFA,EAAa,IACnG,6BAFF,oBAGiBA,EAAa,IAC5B,6BAJF,kBAKeA,EAAa,KAE3BC,EAAW,kBAAC,IAAD,CAAMlH,GAAE,kBAAa0B,KAAK3B,MAAMW,KAAM,4BAAQqD,KAAK,SAASH,UAAU,gBAAhC,gBAA6E,W,GAjCrHZ,a,SC0GLsE,E,YAtGb,WAAYvH,GAAQ,IAAD,8BACjB,4CAAMA,KAgCRkE,YAAc,SAACU,GAAO,IACZD,EAAUC,EAAEG,OAAZJ,MACR9C,QAAQC,IAAI6C,GACZ,IAAMzC,EAAU,CAAE,KAAQyC,GAC1B,EAAK/C,SAAS,CACZM,QAASA,KAtCM,EA0CnB8C,aAAe,SAAMC,GAAN,iBAAAC,EAAAC,OAAA,uDACbF,EAAMI,iBACEnD,EAAY,EAAKT,MAAjBS,QAFK,SAKX,EAAKN,SAAS,CAAEF,aAAa,IAC7BG,QAAQC,IAAR,UAAe,EAAKxB,UAApB,mBAAwC,EAAKN,MAAMwH,MAAMC,OAAO9G,KANrD,WAAAuE,EAAA,MAOKlD,IAAM0F,IAAN,UAAa,EAAKpH,UAAlB,mBAAsC,EAAKN,MAAMwH,MAAMC,OAAO9G,IAAMuB,IAPzE,cAOPqE,EAPO,mBAAArB,EAAA,MAQClD,IAAMC,IAAN,UAAa,EAAK3B,UAAlB,mBAAsC,EAAKN,MAAMwH,MAAMC,OAAO9G,MAR/D,QAQX4F,EARW,OAUX,EAAK3E,SAAS,CACZ+F,SAAUpB,EAAIpE,KACdT,aAAa,IAZJ,kDAeXG,QAAQC,IAAR,MAfW,0DAvCb,EAAKL,MAAQ,CACXC,aAAa,EACbiG,SAAU,GACVC,MAAO,IAGT,EAAKtH,UAAY,qCACjB,EAAK0E,aAAe,EAAKA,aAAasB,KAAlB,gBAVH,E,2KAef3E,KAAKC,SAAS,CAAEF,aAAa,IAC7BG,QAAQC,IAAIH,KAAK3B,O,mBAECgC,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,mBAAsCqB,KAAK3B,MAAMwH,MAAMC,OAAO9G,M,cAA1E4F,E,0BACcvE,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,kBAAqCqB,KAAK3B,MAAMwH,MAAMC,OAAO9G,M,OAA3EiH,E,OAENjG,KAAKC,SAAS,CACZ+F,SAAUpB,EAAIpE,KACdT,aAAa,EACbkG,MAAOA,EAAMzF,KAAK,KAGpBN,QAAQC,IAAIH,KAAKF,MAAMkG,U,kDAEvB9F,QAAQC,IAAI,S,0FAgCN,IAAD,SACkCH,KAAKF,MAAtCC,EADD,EACCA,YAAaiG,EADd,EACcA,SAAUC,EADxB,EACwBA,MAE/B,OAAIlG,EAEA,kBAACU,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQC,KAAK,WAAb,YAMJ,yBAAKqB,UAAU,aACb,yBAAKgE,MAAM,YACX,kBAAC,EAAD,CAAQ3H,MAAM,YAMd,kBAAC,EAAD,CAAOiC,KAAMyF,EAAOjH,GAAIiH,EAAM,KAE9B,kBAACE,EAAA,EAAD,KACGH,EAASlH,KAAI,SAACsH,EAASC,GACtB,OACE,kBAACF,EAAA,EAAUvE,KAAX,CAAgBmB,IAAKsD,GAAID,EAAQzC,OAAOC,KAAKwC,GAAS,SAI5D,kBAAC1D,EAAA,EAAD,KACE,kBAACA,EAAA,EAAW4D,QAAZ,KACE,kBAAC5D,EAAA,EAAWiD,KAAZ,uBAEF,kBAAChD,EAAA,EAAD,CAAaE,SAAU7C,KAAKuC,YAAaK,GAAG,WAAW2D,aAAW,kBAClE,kBAAClB,EAAA,EAAD,CAAQmB,QAAQ,OAAOnE,KAAK,SAAS9C,QAAU,SAAA0D,GAAC,OAAI,EAAKI,aAAaJ,KAAtE,wB,GAhGe3B,a,4CC8CVmF,E,2MA5CX3G,MAAQ,CACJ4G,YAAY,EACZC,UAAU,EACVC,QAAQ,EACR5D,MAAO,I,EAIX6D,aAAe,SAAC5D,EAAD,GAAmB,IAAbD,EAAY,EAAZA,MACjB,EAAK/C,SAAS,CAAE+C,W,EAOpB8D,YAAc,SAAC7D,EAAD,GAAgB,EAAXD,MAGf,EAAK3E,MAAM0I,eAAe,EAAK1I,MAAMiE,YAAa,EAAKxC,MAAMkD,Q,wEAGvD,IAAD,EAC4ChD,KAAKF,MAA9C4G,EADH,EACGA,WAAYC,EADf,EACeA,SAAUC,EADzB,EACyBA,OAAQ5D,EADjC,EACiCA,MACtC,OACI,kBAACgE,EAAA,EAAD,CACIC,OAAK,EACLC,WAAS,EACTC,SAAYT,EACZU,QAAWV,EACXC,SAAYA,EACZC,OAAUA,EACVtE,YAAa,UAAYtC,KAAK3B,MAAMiE,YACpC+E,QAAWrH,KAAK3B,MAAMgJ,QACtBC,iBAAmB,oBACnBzE,SAAU7C,KAAK6G,aACfU,QAAWvH,KAAK8G,YAChBU,oBAAoB,EACpBxE,MAASA,Q,GAvCE1B,aCErBmG,G,OAFUhJ,M,2MAGZqB,MAAQ,CACJsH,SAAS,EACTnI,KAAM,GACNyI,SAAU,GACVrF,KAAM,GACNnD,OAAQ,GACRyI,QAAS,I,EAGbhJ,UAAY,qC,EA4CZiJ,aAAe,CACX5F,KAAM,WACNK,KAAM,WACNwF,WAAY,CAAC,CAAC9E,IAAK,IAAK+E,KAAM,OAAQ9E,MAAO,QACjC,CAACD,IAAK,IAAK+E,KAAM,MAAO9E,MAAO,OAC/B,CAACD,IAAK,IAAK+E,KAAM,SAAU9E,MAAO,Y,EAGlD+E,WAAa,CACT/F,KAAM,SACNK,KAAM,WACNwF,WAAY,CAAC,CAAC9E,IAAK,KAAM+E,KAAM,gBAAiB9E,MAAO,YAC3C,CAAED,IAAK,KAAM+E,KAAM,kBAAmB9E,MAAO,cAC7C,CAAED,IAAK,KAAM+E,KAAM,kBAAmB9E,MAAO,gB,EAG7DgF,SAAW,CACPhG,KAAM,OACNK,KAAM,WACNwF,WAAY,CAAC,CAAE9E,IAAK,OAAQ+E,KAAM,OAAQ9E,MAAO,QACjD,CAAED,IAAK,aAAc+E,KAAM,aAAc9E,MAAO,cAChD,CAAED,IAAK,aAAc+E,KAAM,aAAc9E,MAAO,cAChD,CAAED,IAAK,UAAW+E,KAAM,UAAW9E,MAAO,a,EAG9C+D,eAAiB,SAAC/E,EAAMgB,GACpB,EAAK/C,SAAL,eAAgB+B,EAAOgB,IAAQ,WAC3B9C,QAAQC,IAAI6B,EAAMgB,GAClB9C,QAAQC,IAAI,4BACZD,QAAQC,IAAI,EAAKL,MAAM4H,c,EAK/BO,WAAa,WAET,EAAK5J,MAAMmB,QAAQC,KAAK,Y,EAG5BoH,aAAe,SAAC5D,EAAD,GAAuB,IAAlBjB,EAAiB,EAAjBA,KAAMgB,EAAW,EAAXA,MACtB,EAAK/C,SAAL,eAAgB+B,EAAMgB,K,EAG1BkF,iBAAmB,WACf,IAAIC,EACM,EAAKrI,MAAMb,KADjBkJ,EAEU,EAAKrI,MAAM4H,SAFrBS,EAGM,EAAKrI,MAAMuC,KAHjB8F,EAIQ,EAAKrI,MAAMZ,OAGvB,SAAIiJ,GAAkBA,EAAmB9D,OAAS,GAAK8D,EAAe9D,OAAS,GAAK8D,EAAiB9D,OAAS,KAC1GnE,QAAQC,IAAI,yBACL,I,EAMfiI,oBAAsB,WAAO,IAAD,EAC0B,EAAKtI,MAAtCb,GADO,EAChBmI,QADgB,EACPnI,MAAMyI,EADC,EACDA,SAAUrF,EADT,EACSA,KAAMnD,EADf,EACeA,OACnCmJ,EAAc,GAmBlB,OAjBInJ,EAAOmF,OAAS,GAChBgE,EAAY5I,KAAK,UAAUP,EAAOoJ,YAGlCjG,EAAKgC,OAAS,GACdgE,EAAY5I,KAAK,QAAQ4C,EAAKiG,YAG9BZ,EAASrD,OAAS,GAClBgE,EAAY5I,KAAK,YAAciI,EAASY,YAGxCrJ,EAAKoF,OAAS,GACdgE,EAAY5I,KAAK,QAAQR,GAG7BoJ,EAAcA,EAAYE,KAAK,M,EAInClF,aAAe,SAAMJ,GAAN,eAAAM,EAAAC,OAAA,mDACXP,EAAES,kBACE,EAAKwE,mBAFE,iCAIGM,EAAc,EAAKJ,sBACzBlI,QAAQC,IAAI,qBAAsBqI,GAL/B,WAAAjF,EAAA,MAOGlD,IAAMC,IAAN,UAAa,EAAK3B,UAAlB,kBAAqC6J,IACtCC,MAAK,SAAAlI,GACF,EAAKN,SAAS,CAAEmH,SAAS,IACzB,EAAK/I,MAAMmB,QAAQC,KAAK,UAAW,CAAEZ,OAAQ0B,EAAQC,WAV1D,uDAaHN,QAAQC,IAAI,2CAbT,uCAiBPD,QAAQC,IAAI,2DAjBL,sBAAAoD,EAAA,MAoBGlD,IAAMC,IAAN,UAAa,EAAK3B,UAAlB,WACL8J,MACG,SAAAlI,GAAa,EAAKN,SAAS,CAAEmH,SAAS,IACtClH,QAAQC,IAAI,sCAAuCI,EAAQC,MAC3D,EAAKnC,MAAMmB,QAAQC,KAAK,UAAW,CAACZ,OAAQ0B,EAAQC,WAxBrD,2DA4BHN,QAAQC,IAAI,qCA5BT,iE,gKA3HX,IACIE,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,YACC8J,MAAM,SAAAlI,GACH,EAAKN,SAAS,CAAC0H,QAASpH,EAAQC,UAGtC,MAAOyC,GACL/C,QAAQC,IAAI,+C,gFAqJV,IAAD,OAECiH,EAAUpH,KAAKF,MAAMsH,QAE3B,OAAIA,EAEI,kBAAC3G,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACnB,kBAACC,EAAA,EAAD,CAAQC,KAAK,WAAb,gCAMR,6BACI,kBAACgE,EAAA,EAAD,CAASC,OAAK,EAAC7D,QAAM,GAArB,IAAuB,kBAAC,IAAD,CAAQ2B,GAAG,MAAX,mBAAvB,KACI,kBAACiC,EAAA,EAAD,CAAS5D,OAAO,OAAO8D,QAAM,EAACnF,MAAM,QAChC,kBAAC8I,EAAA,EAAD,CAAMC,UAAQ,GACd,kBAAC,IAAD,CAAMvB,QAASA,EAASnC,SAAUjF,KAAKqD,aAAasB,KAAK3E,MAAOa,KAAK,QAAQlB,MAAO,CAAEyB,MAAO,OAASwH,aAAa,MAC/G,2BAAO1D,MAAM,SAAShD,UAAU,UAAUiD,YAAY,OAClD,+BAEI,4BACI,gCAAK,kDAAL,MACA,4BAEI,2BAAO9C,KAAK,OAAOC,YAAY,aAC3BO,SAAU,SAACS,GAAD,OAAW,EAAKrD,SAAS,CAAEhB,KAAMqE,EAAMF,OAAOJ,aAKpE,4BACI,gCAAK,8CAAL,KACA,4BACI,kBAAE,EAAF,CACIV,YAAatC,KAAK4H,aAAa5F,KAC/BqF,QAASrH,KAAK4H,aAAaC,WAC3Bd,eAAgB/G,KAAK+G,mBAKjC,4BACI,gCAAM,0CAAN,KACA,4BACI,kBAAE,EAAF,CACIzE,YAAatC,KAAKgI,SAAShG,KAC3BqF,QAASrH,KAAKgI,SAASH,WACvBd,eAAgB/G,KAAK+G,mBAKjC,4BACI,gCAAK,6CACL,4BACI,kBAAE,EAAF,CACIzE,YAAatC,KAAK+H,WAAW/F,KAC7BqF,QAASrH,KAAK+H,WAAWF,WACzBd,eAAgB/G,KAAK+G,qBAMzC,6BACA,kBAAC,IAAD,CAAQ8B,UAAQ,EAACtJ,QAAS,SAAA0D,GAAC,OAAI,EAAKgF,WAAWtD,KAAK,KAChD,kBAAC,IAAOmE,QAAR,CAAgBC,SAAO,GAAvB,UACA,kBAAC,IAAOD,QAAR,CAAgBE,QAAM,GAClB,kBAACjH,EAAA,EAAD,CAAMC,KAAK,iBAInB,kBAAC,IAAD,CAAQK,KAAK,SAASwG,UAAQ,GAC1B,kBAAC,IAAOC,QAAR,CAAgBC,SAAO,GAAvB,UACA,kBAAC,IAAOD,QAAR,CAAgBE,QAAM,GAClB,kBAACjH,EAAA,EAAD,CAAMC,KAAK,0B,GAtPtBV,cAuQVC,cAAWkG,GCzQpBwB,E,2MAcFC,oBAAsB,WAClB,IAAM3I,EAAU,EAAKT,MAAM6H,QAAQxE,WASnCQ,OAAOC,KAAKrD,GAASzB,KAAI,SAACqJ,GAClBjI,QAAQC,IAAIgI,O,gKAtBpB,IACI9H,IAAMC,IAAN,UAAaN,KAAKrB,UAAlB,YACK8J,MAAK,SAAAlI,GACF,EAAKN,SAAS,CAAE0H,QAASpH,EAAQC,OACjC,EAAK0I,yBAEf,MAAOjG,GACL/C,QAAQC,IAAI,+C,wFAVLmB,aA0CJC,eAAW0H,GCvBXE,OAhBf,WACE,OACE,yBAAKjH,UAAU,OACb,kBAAC,IAAD,CAAgBkH,SAAS,wBACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,UAAUC,UAAWtH,IACvC,kBAAC,IAAD,CAAOoH,OAAK,EAACC,KAAK,eAAeC,UAAWC,IAC5C,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,cAAcC,UAAW3D,IAC3C,kBAAC,IAAD,CAAOyD,OAAK,EAACC,KAAK,YAAYC,UAAWN,SCRjCQ,QACW,cAA7BC,OAAOtJ,SAASuJ,UAEe,UAA7BD,OAAOtJ,SAASuJ,UAEhBD,OAAOtJ,SAASuJ,SAAS9D,MACvB,2DCZN+D,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.7f4e2394.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nfunction Header(props) {\n  return (\n    <>\n      <Link to={ '/' }>\n          <h2>{props.title}</h2>\n      </Link>\n    </>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Loader, Dimmer, Table } from 'semantic-ui-react' \nimport createHistory from \"history/createBrowserHistory\"\nimport { withRouter } from 'react-router-dom';\n\nconst history = createHistory();\n\nclass ThreadAlerts extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loadingData: false,\n            alerts: []\n        };\n    }\n    \n    async componentDidMount() {\n        // In case we reached this page from the filters first page.\n        try {\n            this.setState({loadingData: true})\n            console.log(\"ThreadAlerts.js/ComponentDidMount Props: \", this.props.location.state)\n            this.setState({ \n                loadingData: false,\n                alerts: this.props.location.state.alerts \n            });\n        } catch (e) {  // In case we navigate straight to the main page\n            try {\n                this.setState({ loadingData: true });\n                const payload = await axios.get(`${this.apiServer}alerts`)\n                this.setState({\n                    loadingData: false,\n                    alerts: payload.data,\n                });\n            } catch (e) {\n                console.log('Error while fetching alterts')\n            }\n            console.log(\"Error! \" , e , \" Alerts State: \", this.state.alerts)\n        }\n    }\n\n    background = {\n        \"Low\": \"#000000\",\n        \"Medium\": \"#FFCC00\",\n        // \"High\": \"#FF0000\",\n        \"High\": \"#CC0000\",\n        \n    };\n\n    apiServer = 'https://socnet.pythonanywhere.com/';\n\n    renderTableData = (alerts) => {\n        return alerts.map((alertData) => {\n            const id = alertData[0]\n            const date = alertData[1]\n            const region = alertData[4]\n            const title = alertData[6]\n            const description = alertData[7]\n\n            const bgcolor = this.background\n\n            return (\n                <Table.Row \n                    onClick = {() => {\n                        this.props.history.push(`/thread/${id}`)\n                    }\n                }>\n                    {/* <Table.Cell > <Icon name=\"check\" /> </Table.Cell> */}\n                    <Table.Cell> Active </Table.Cell>\n                    <Table.Cell style={{ color: bgcolor[alertData[8]] }}> {title} </Table.Cell>\n                    <Table.Cell> {description} </Table.Cell>\n                    <Table.Cell> {region} </Table.Cell>\n                    <Table.Cell textAlign=\"right\"> {date} </Table.Cell>\n                </Table.Row>\n            )\n        })\n    }\n\n    render() {\n\n        const { loadingData, alerts } = this.state;\n        console.log(alerts);\n\n        if (loadingData) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div style={{padding: \"2%\"}}>\n                <Table fixed singleLine padded selectable color=\"teal\">\n                    <Table.Header>\n                        <Table.HeaderCell> Status </Table.HeaderCell>\n                        <Table.HeaderCell> Type </Table.HeaderCell>\n                        <Table.HeaderCell width={6}> Description </Table.HeaderCell>\n                        <Table.HeaderCell> Region </Table.HeaderCell>\n                        <Table.HeaderCell textAlign=\"right\"> Date </Table.HeaderCell>\n                    </Table.Header>\n                    <Table.Body>\n                        { this.renderTableData(alerts) }\n                    </Table.Body>\n                </Table>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ThreadAlerts);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Icon } from 'semantic-ui-react';\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <Menu pointing secondary>\n                <Menu.Item active={true}>\n                    <span style={{fontSize: 20}}> \n                        SOCNET\n                    </span>\n                </Menu.Item>\n                    \n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <Link to='/createAlert'>\n                            <Icon name=\"add\" /> Create Alert\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item> \n                        <Link to='/'>\n                            <Icon name=\"filter\" /> Filter Results\n                        </Link>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Menu>\n        )\n    }\n};\n\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport Header from './Header';\nimport ThreadAlerts from './ThreadAlerts';\nimport './styles.css';\nimport NavBar from './Navbar';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingData: false,\n    };\n    this.apiServer = 'https://socnet.pythonanywhere.com/'\n  }\n\n  //  Fetching alerts is now handled in the new component \"ThreadAlerts\" or \"FilterForm\"\n  // async componentDidMount() {\n  //   try {\n  //     this.setState({ loadingData: true });\n  //     // get the alerts from the server\n  //     const res = await axios.get(`${this.apiServer}alerts`);\n  //     // add them to the state\n  //     this.setState({\n  //       alerts: res.data,\n  //       loadingData: false,\n  //     })\n  //     console.log(this.state);\n  //   } catch (e) {\n  //     console.log('error')\n  //   }\n  // }\n\n  render() {\n    const loadingData  = this.state.loadingData;\n\n    // while fetching data from the API\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n\n    return (\n\n      <div className=\"container\">\n          {/* <Header title=\"Socnet\" className=\"main-title\"/>\n            <Link to='/createAlert'><button type=\"button\" className=\"btn btn-primary\">Create Alert</button></Link>\n            <Link to='/'><button type=\"button\" className=\"btn btn-primary\">Filter Results</button></Link> */}\n        < NavBar />\n        <ThreadAlerts />\n        \n      </div>\n\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { FormControl, InputGroup } from 'react-bootstrap';\n\nfunction FormInputField(props) {\n\n  const { label, type, placeholder, propChanged, values, errorMessage } = props;\n\n  if (typeof values !== \"undefined\") {\n    return (\n      <InputGroup className=\"mb-3\">\n        \n        < FormControl\n          placeholder={placeholder}\n          as={type}\n          onChange={propChanged}\n          required\n        >\n          <option key=\"Choose...\">Choose...</option>\n          {values.map((value) => {\n            return (<option key={value}>{value}</option>);\n          })}\n        </FormControl>\n        <div>{errorMessage}</div>\n      </InputGroup>\n    );\n  } else {\n    return (\n      <InputGroup className=\"mb-3\">\n        {/* <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">{label}</InputGroup.Text>\n        </InputGroup.Prepend> */}\n        <FormControl\n          placeholder={placeholder}\n          type={type}\n          onChange={propChanged}\n          required\n        />\n      </InputGroup>\n    );\n  }\n}\n\nexport default FormInputField;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport { Form , Button } from 'react-bootstrap';\nimport FormInputField from './FormInputField';\nimport moment from 'moment';\nimport { Header, Segment } from 'semantic-ui-react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingData: false,\n      properties: {},\n      requiredProperties: [],\n      payload: {}\n    };\n\n    this.apiServer = 'https://socnet.pythonanywhere.com/';\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      const res = await axios.get(`${this.apiServer}form`);\n      this.setState({\n        properties: res.data.properties,\n        requiredProperties: res.data.required,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log('error')\n    }\n  }\n\n  propChanged = (e, item) => {\n\n    const { properties } = this.state;\n    const { value } = e.target;\n    console.log(\"props changed properties \", properties);\n    properties[item].value = value;\n    this.setState({\n      payload: properties,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    console.log(\"event is \", this.inputNode);\n    console.log(\"before payload\", this.state.payload);\n    event.preventDefault();\n\n    const { payload } = this.state;\n    const { history } = this.props;\n\n    Object.keys(payload).map((payloadKey) => {\n      if (payloadKey === \"event_severity\" && payload[payloadKey].value === undefined) {\n        payload[payloadKey] = 'Low';\n      } else\n        payload[payloadKey] = payload[payloadKey].value;\n    });\n\n    payload[\"event_datetime\"] = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n    console.log(\"after payload\", moment().format(\"YYYY-MM-DD hh:mm:ss\"));\n    \n    try {\n      await axios.post(`${this.apiServer}alerts`, payload);\n      history.push('/alerts');\n    } catch (e) {\n      console.log(e)\n    }\n\n  }\n  \n  formatItem = (item) => {\n    if (item.includes(\"event\")){\n      item=item.substring(6,item.length);\n    }\n    else {\n      item=\"sender's name\";\n    }\n    return item;\n  }\n  formatType = (type, values) => {\n    if (typeof values === \"undefined\") {\n      if (type === \"datetime\") {\n        return \"datetime-local\";\n      } else {\n        return \"text\";\n      }\n    } else {\n      return \"select\";\n    }\n  };\n\n  firstLetterUpperCase = (item) => {\n    return item[0].toUpperCase() + item.slice(1) + \": \"\n  }\n\n  render() {\n    const { loadingData, properties, errorMessage } = this.state\n\n    if (loadingData) {\n      return (\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n\n      <div className=\"container\">\n        <Segment basic padded>\n          <Header as=\"h1\"> Create Alerts </Header>\n          <Header> Please help us stay safe by entering the information about the incident you wish to report.</Header>\n        </Segment>\n      {/* Commenting the code below. Deprecated in favor of the new UI. */}\n      {/* <div className=\"container mt-5\">\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='shield alternate' circular/>\n          Please help us stay safe by entering the information about the incident you wish to report.\n        </Header>\n        </Segment>\n      </div> */}\n        <Segment padded='very' raised color='teal'>\n          <Form className=\"container-fluid mt-4\" onSubmit={e => this.handleSubmit(e)}>\n            <table align=\"center\" cellPadding=\"5px\"> \n              <tbody>\n                {Object.keys(properties).map((item) => {\n                  if (item !== 'event_datetime') {\n                    return (\n                      <tr> \n                        <td>\n                          <label> {this.firstLetterUpperCase(this.formatItem(item))} </label>\n                        </td>\n                        <td> \n                          <FormInputField\n                            label={this.formatItem(item)}\n                            type={this.formatType(properties[item].type, properties[item].values)}\n                            placeholder={properties[item].example}\n                            propChanged={e => this.propChanged(e, item)}\n                            values={properties[item].values}\n                            key={this.formatItem(item)}\n                            errorMessage={errorMessage}\n                          ></FormInputField>\n                        </td>\n                      </tr>\n                    );\n                  }\n                })}\n\n              </tbody>\n            </table>\n            <Button type=\"submit\"> Submit Alert  </Button>\n          </Form>\n          </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\n\nclass Alert extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      eventDetails: this.props.data,\n    }\n    this.background = {\n      \"Low\": \"light\",\n      \"Medium\": \"warning\",\n      \"High\": \"danger\",\n    };\n    this.bgcolor = {\n      \"Low\": \"#FFFFFF\",\n      \"Medium\": \"#FFCC00\",\n      \"High\": \"#CC0000\",\n    }\n  }\n\n  render() {\n    const { eventDetails } = this.state;\n    const { linkable } = this.props\n    return (\n      <Card className=\"m-3\">\n        <Card.Header style={{background: this.bgcolor[eventDetails[8]]}}  as=\"h5\">{ eventDetails[6] }</Card.Header>\n        <Card.Body>\n          <Card.Title>{ eventDetails[7] }</Card.Title>\n          <Card.Text>\n            { `${eventDetails[3]}, ${eventDetails[4]} ${eventDetails[2]}, ${eventDetails[5]} at ${eventDetails[1]}` }\n            <br />\n            { `Priority: ${eventDetails[8]}` }\n            <br />\n            { `Author: ${eventDetails[9]}` }\n          </Card.Text>\n          {linkable ? <Link to={`/thread/${this.props.id}`}><button type=\"button\" className=\"btn btn-dark\">View Thread</button></Link> : null}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Alert;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Loader, Dimmer } from 'semantic-ui-react';\nimport Header from './Header';\nimport Alert from './Alert';\nimport { ListGroup, InputGroup, FormControl, Button } from 'react-bootstrap';\n\nclass ThreadView extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loadingData: false,\n      comments: [],\n      alert: [],\n    }\n    // console.log(\"Constructor: \", this.props.match.params.id )\n    this.apiServer = 'https://socnet.pythonanywhere.com/'\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      this.setState({ loadingData: true });\n      console.log(this.props);\n\n      const res = await axios.get(`${this.apiServer}threads/${this.props.match.params.id}`);\n      const alert = await axios.get(`${this.apiServer}alerts/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n        alert: alert.data[0],\n      })\n\n      console.log(this.state.comments);\n    } catch (e) {\n      console.log('error')\n    }\n  }\n\n  propChanged = (e) => {\n    const { value } = e.target;\n    console.log(value)\n    const payload = { \"text\": value }\n    this.setState({\n      payload: payload,\n    })\n  }\n\n  handleSubmit = async(event) => {\n    event.preventDefault();\n    const { payload } = this.state;\n\n    try {\n      this.setState({ loadingData: true });\n      console.log(`${this.apiServer}threads/${this.props.match.params.id}`)\n      let res = await axios.put(`${this.apiServer}threads/${this.props.match.params.id}`, payload);\n      res = await axios.get(`${this.apiServer}threads/${this.props.match.params.id}`);\n\n      this.setState({\n        comments: res.data,\n        loadingData: false,\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  render() {\n    const { loadingData, comments, alert } = this.state;\n\n    if (loadingData) {\n      return(\n        <Dimmer active inverted>\n          <Loader size=\"massive\">Loading</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <div class=\"col-auto\">\n        <Header title=\"Socnet\" />\n        {/* <div class=\"form-check form-check-inline\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"></input>\n        <label class=\"form-check-label\" for=\"inlineRadio1\">1</label>\n        </div> */}\n        </div>\n        <Alert data={alert} id={alert[0]} />\n        \n        <ListGroup>\n          {comments.map((comment, i) => {\n            return(\n              <ListGroup.Item key={i}>{comment[Object.keys(comment)[0]]}</ListGroup.Item>\n            )\n          })}\n        </ListGroup>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>Add a comment</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl onChange={this.propChanged} as=\"textarea\" aria-label=\"Add a comment\" />\n          <Button variant=\"dark\" type=\"submit\" onClick= {e => this.handleSubmit(e)}>Submit Comment</Button>\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nexport default ThreadView;\n","import React, { Component } from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\n// The module requires three props:\n// // placeholder: identify the dropdown menu\n// // options: array of dropdown options structured as {key, name, value}\n// // handleDropdown: a handler function which accepts the selcted values \n\nclass DropdownList extends Component {\n    state = {\n        isFetching: false,  // animates a spinning wheel during search\n        multiple: true, \n        search: true, \n        value: [] \n    };\n    \n    // Maintain the state as the user changes the selection(s).\n    handleChange = (e, { value }) => {\n        this.setState({ value })\n        // console.log(this.state.value)\n    };\n\n    // Once the dropdown is closed, the control is packed back \n    // to a handler. placeholder is used as an identifier and \n    // value holds the dropdown selections (empty array if no selections)\n    handleClose = (e, {value}) => {\n        //console.log(this.state.value);\n        //console.log(\"Name\", this.props.placeholder)\n        this.props.handleDropdown(this.props.placeholder, this.state.value)\n    };\n\n    render() {\n        const { isFetching, multiple, search, value  } = this.state\n        return (\n            <Dropdown \n                fluid\n                selection\n                disabled = {isFetching}\n                loading = {isFetching}\n                multiple = {multiple}\n                search = {search}\n                placeholder={\"Select \" + this.props.placeholder}\n                options = {this.props.options} \n                noResultsMessage = \"No results found.\"\n                onChange={this.handleChange}\n                onClose = {this.handleClose}\n                selectOnNavigation={false}\n                value = {value}\n            />\n        )\n    }\n}\n\nexport default DropdownList;","import React, { Component } from 'react';\nimport { Dimmer, Loader, Grid, Button, Form, Header, Icon, Segment } from 'semantic-ui-react';\nimport DropdownList from \"./DropdownList\";\nimport createHistory from \"history/createBrowserHistory\";\nimport { withRouter } from 'react-router-dom';\nimport \"./Filters.css\"\nimport axios from 'axios';\n\nconst history = createHistory();\n\nclass FilterForm extends Component {\n    state = {\n        loading: false,\n        date: \"\", \n        severity: [], \n        type: [],\n        region: [], \n        filters: \"\"\n    };\n    \n    apiServer = 'https://socnet.pythonanywhere.com/';\n    // devApiServer = \"http://127.0.0.1:8000/\";\n\n    async componentDidMount() {\n        try {\n            axios.get(`${this.apiServer}filters`)\n            .then( payload => {\n                this.setState({filters: payload.data})\n                //this.transformFilterData();\n            });\n        } catch (e) {\n            console.log(\"Unable to fetch values for the filter form.\")\n        }\n\n    }\n\n    // transformFilterData = () => {\n    //     const payload = this.state.filters.properties;\n    //     // console.log(\"Before change: \", payload)\n    //     // for ( var field in payload ) {\n    //     //     console.log(typeof(field))\n    //     //     if (field.type === \"dropdown\") {\n    //     //         var optionList = this.optionListArray(field.optionList)\n    //     //         field.optionList = optionList;\n    //     //     }\n    //     // }\n    //     Object.keys(payload).map((fields) => {\n    //         Object.keys(fields).map((properties) => {\n    //             console.log(fields, properties)\n    //         })\n    //     })\n    // }\n\n    // optionListArray = (optionObject) => {\n    //     console.log(\"Option List: \", optionObject);\n    //     var options = [];\n    //     for ( var option in optionObject) {\n    //         options.push(option.value());\n    //     }\n    //     console.log(\"Options Array:\" , options);\n    //     return options;\n    // }\n\n    // Sample Input: Development time only\n    severityList = {\n        name: \"severity\",\n        type: \"dropdown\",\n        optionList: [{key: \"H\", text: \"High\", value: \"High\"}, \n                    {key: \"L\", text: \"Low\", value: \"Low\"}, \n                    {key: \"M\", text: \"Medium\", value: \"Medium\"}]\n    };\n\n    regionList = {\n        name: \"region\", \n        type: \"dropdown\", \n        optionList: [{key: \"NY\", text: \"NY - New York\", value: \"New York\"}, \n                    { key: \"NJ\", text: \"NJ - New Jersey\", value: \"New Jersey\" },\n                    { key: \"CT\", text: \"CT - Conneticut\", value: \"Conneticut\" }]\n    };\n\n    typeList = {\n        name: \"type\",\n        type: \"dropdown\",\n        optionList: [{ key: \"Fire\", text: \"Fire\", value: \"Fire\" },\n        { key: \"Earthquake\", text: \"Earthquake\", value: \"Earthquake\" },\n        { key: \"Ransomware\", text: \"Ransomware\", value: \"Ransomware\" },\n        { key: \"Malware\", text: \"Malware\", value: \"Malware\"}]\n    }\n\n    handleDropdown = (name, value) => {\n        this.setState({[name]: value}, () => {\n            console.log(name, value);\n            console.log(\"Data changed by dropdown\")\n            console.log(this.state.severity)\n        });\n    };\n    \n    // Excecuted when the back button is clicked\n    handleBack = () => {\n        // Soon to be depreciated\n        this.props.history.push('/alerts')\n    }\n\n    handleChange = (e, {name, value}) => { \n        this.setState({[name]:value})\n    }\n\n    handleValidation = () => {\n        let fields = {\n            date: this.state.date,\n            severity: this.state.severity,\n            type: this.state.type,\n            region: this.state.region\n        };\n\n        if (fields[\"date\"] || fields[\"severity\"].length > 0 || fields[\"type\"].length > 0 || fields[\"region\"].length > 0) {\n            console.log(\"User chose a filter!\")\n            return true\n        } else {\n            return false\n        }\n    }\n\n    generateQueryString = () => {\n        const { loading, date, severity, type, region } = this.state;\n        var queryString = [];\n        \n        if (region.length > 0) {\n            queryString.push(\"region=\"+region.toString());\n        }\n        \n        if (type.length > 0) {\n            queryString.push(\"type=\"+type.toString());\n        }\n\n        if (severity.length > 0) {\n            queryString.push(\"severity=\" + severity.toString());\n        }\n\n        if (date.length > 0) {\n            queryString.push(\"date=\"+date)\n        }\n\n        queryString = queryString.join(\"&\");\n        return queryString\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault()\n        if (this.handleValidation()) {\n            try {\n                const queryParams = this.generateQueryString()\n                console.log(\"Query Parameters: \", queryParams)\n\n                await axios.get(`${this.apiServer}alerts?${queryParams}`)\n                    .then(payload => {\n                        this.setState({ loading: false });\n                        this.props.history.push('/alerts', { alerts: payload.data });\n                    });\n            } catch (e) {\n                console.log(\"ERROR: UNABLE TO FETCH FILTERED RESULTS\")\n            }\n        } else {\n            // The user has not added any valid entries to the form\n            console.log(\"The form had no entries. Attempting to load all alerts.\")\n            try {\n                // this.setState({ loading: true });\n                await axios.get(`${this.apiServer}alerts`)\n                .then (\n                    payload => { this.setState({ loading: false, });\n                    console.log(\"Alerts loaded. Payload looks like: \", payload.data)\n                    this.props.history.push('/alerts', {alerts: payload.data})\n                })\n                \n            } catch (e) {\n                console.log('ERROR: UNABLE TO GET ALL RESULTS.')\n            }\n        }\n    }\n\n    render() {\n\n        const loading = this.state.loading;\n\n        if (loading) {\n            return (\n                <Dimmer active inverted>\n                    <Loader size=\"massive\"> Loading: fetching alerts..</Loader>\n                </Dimmer>\n            )\n        }\n\n        return (\n            <div>\n                <Segment basic padded> <Header as=\"h1\"> Filter Alerts </Header> </Segment>\n                    <Segment padded='very' raised color='teal'>\n                        <Grid centered>\n                        <Form loading={loading} onSubmit={this.handleSubmit.bind(this)} size=\"large\" style={{ width: \"60%\" }} autoComplete=\"on\">\n                            <table align=\"center\" className=\"filters\" cellPadding=\"5px\">\n                                <tbody>\n                                    {/* Date */}\n                                    <tr>\n                                        <td> <label> Since (Date): </label>  </td>\n                                        <td>\n                                            {/* TO-DO: Input type date doesn't work with Safari and IE. */}\n                                            <input type=\"date\" placeholder=\"mm/dd/yyyy\"\n                                                onChange={(event) => this.setState({ date: event.target.value })}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr>  \n                                        <td> <label> Severity: </label> </td>\n                                        <td>\n                                            < DropdownList\n                                                placeholder={this.severityList.name}\n                                                options={this.severityList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr >\n                                        <td > <label> Type: </label> </td>\n                                        <td> \n                                            < DropdownList\n                                                placeholder={this.typeList.name}\n                                                options={this.typeList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n\n                                    <tr>\n                                        <td> <label> Region: </label></td>\n                                        <td> \n                                            < DropdownList\n                                                placeholder={this.regionList.name}\n                                                options={this.regionList.optionList}\n                                                handleDropdown={this.handleDropdown}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <br /> \n                            <Button animated onClick={e => this.handleBack.bind(this)}>\n                                <Button.Content visible> Back </Button.Content>\n                                <Button.Content hidden>\n                                    <Icon name='arrow left' />\n                                </Button.Content>\n                            </Button>\n\n                            <Button type=\"submit\" animated>\n                                <Button.Content visible>Submit</Button.Content>\n                                <Button.Content hidden>\n                                    <Icon name='arrow right' />\n                                </Button.Content>\n                            </Button>\n                        </Form>\n                    </Grid>\n                </Segment> \n                {/* Uncomment below to see state as it gets changed. */}\n                {/*  <br />\n                    <strong> LEAVE BLANK FOR ALL </strong>\n                    <strong> For testing before backend integration </strong>\n                    <pre>{JSON.stringify({ severity, date, region, type })}</pre> \n                */}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(FilterForm);","// This file exports a 'Test' class to test functionality in production \n// before pushing it to the main branch\n\nimport { Component } from 'react';\nimport { withRouter } from 'react-router-dom'; \nimport axios from 'axios'\n\n\nclass Test extends Component {\n\n    async componentDidMount() {\n        try {\n            axios.get(`${this.apiServer}filters`)\n                .then(payload => {\n                    this.setState({ filters: payload.data })\n                    this.transformFilterData();\n                });\n        } catch (e) {\n            console.log(\"Unable to fetch values for the filter form.\")\n        }\n    }\n\n    transformFilterData = () => {\n        const payload = this.state.filters.properties;\n        // console.log(\"Before change: \", payload)\n        // for ( var field in payload ) {\n        //     console.log(typeof(field))\n        //     if (field.type === \"dropdown\") {\n        //         var optionList = this.optionListArray(field.optionList)\n        //         field.optionList = optionList;\n        //     }\n        // }\n        Object.keys(payload).map((fields) => {\n                console.log(fields)\n        });\n    }\n\n    // optionListArray = (optionObject) => {\n    //     console.log(\"Option List: \", optionObject);\n    //     var options = [];\n    //     for ( var option in optionObject) {\n    //         options.push(option.value());\n    //     }\n    //     console.log(\"Options Array:\" , options);\n    //     return options;\n    // }\n\n    return () {}\n}\n\nexport default withRouter(Test);","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport Home from './components/Home';\nimport CreateAlert from './components/CreateAlert';\nimport ThreadView from './components/ThreadView';\nimport FilterForm from './components/FilterForm';\nimport Test from './components/Test';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter  basename=\"/socnet/webapp.html#\">\n        <Switch>\n            <Route exact path=\"/\" component={FilterForm} />\n            <Route exact path=\"/alerts\" component={Home} />\n            <Route exact path=\"/createAlert\" component={CreateAlert} />\n            <Route exact path=\"/thread/:id\" component={ThreadView} />  \n            <Route exact path=\"/testPage\" component={Test} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}